{
    "sourceFile": "frontend/src/components/predictionChart.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1746510306861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746517767130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-// frontend/src/components/PredictionChart.jsx\r\n+// frontend/src/components/predictionChart.jsx\r\n import React, { useState, useEffect } from 'react';\r\n import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\n import apiService from '../services/apiService';\r\n \r\n@@ -7,136 +7,126 @@\n   const [predictions, setPredictions] = useState([]);\r\n   const [isLoading, setIsLoading] = useState(true);\r\n   const [error, setError] = useState(null);\r\n   \r\n+  // Nhiệt độ hiện tại và nhiệt độ dự đoán tối đa\r\n+  const [currentTemp, setCurrentTemp] = useState('N/A');\r\n+  const [maxPredicted, setMaxPredicted] = useState('N/A');\r\n+  \r\n   useEffect(() => {\r\n     const fetchPredictions = async () => {\r\n       setIsLoading(true);\r\n       setError(null);\r\n+      \r\n       try {\r\n-        console.log('Fetching temperature predictions...');\r\n+        console.log('Đang lấy dữ liệu dự đoán nhiệt độ...');\r\n         const response = await apiService.get('/predictions');\r\n+        console.log('Phản hồi API:', response.data);\r\n         \r\n-        if (response.data && response.data.data) {\r\n-          // Format the data for the chart\r\n+        if (response.data && response.data.data && response.data.data.length > 0) {\r\n+          // Định dạng dữ liệu cho biểu đồ\r\n           const formattedData = response.data.data.map(pred => ({\r\n-            ...pred,\r\n-            time: new Date(pred.time).toLocaleTimeString(),\r\n-            // Ensure values are numeric\r\n+            time: new Date(pred.time).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}),\r\n             predicted: pred.predicted !== null ? parseFloat(pred.predicted) : null,\r\n             actual: pred.actual !== null ? parseFloat(pred.actual) : null\r\n           }));\r\n           \r\n-          console.log('Received prediction data:', formattedData);\r\n+          console.log('Dữ liệu đã định dạng:', formattedData);\r\n           setPredictions(formattedData);\r\n+          \r\n+          // Đặt nhiệt độ hiện tại và dự đoán tối đa\r\n+          const actualTemp = formattedData.find(p => p.actual !== null)?.actual;\r\n+          if (actualTemp !== undefined) {\r\n+            setCurrentTemp(actualTemp.toFixed(1));\r\n+          }\r\n+          \r\n+          const predictedValues = formattedData\r\n+            .filter(p => p.predicted !== null)\r\n+            .map(p => p.predicted);\r\n+            \r\n+          if (predictedValues.length > 0) {\r\n+            setMaxPredicted(Math.max(...predictedValues).toFixed(1));\r\n+          }\r\n         } else {\r\n-          console.log('No prediction data in response');\r\n-          // Use mock data if no predictions are available yet\r\n-          createMockData();\r\n+          console.log('Không có dữ liệu dự đoán. Hiển thị thông báo.');\r\n+          setPredictions([]);\r\n+          setError('Không có dữ liệu dự đoán. Vui lòng thử lại sau.');\r\n         }\r\n       } catch (error) {\r\n-        console.error('Failed to fetch predictions:', error);\r\n-        setError('Failed to load predictions. Using sample data instead.');\r\n-        // Use mock data if API fails\r\n-        createMockData();\r\n+        console.error('Lỗi khi lấy dữ liệu dự đoán:', error);\r\n+        setError('Không thể kết nối đến máy chủ dự đoán.');\r\n+        setPredictions([]);\r\n       } finally {\r\n         setIsLoading(false);\r\n       }\r\n     };\r\n     \r\n-    // Create mock data for development/fallback\r\n-    const createMockData = () => {\r\n-      const mockData = [];\r\n-      const now = new Date();\r\n-      \r\n-      // Current reading\r\n-      mockData.push({\r\n-        time: now.toLocaleTimeString(),\r\n-        actual: 25.5,\r\n-        predicted: null\r\n-      });\r\n-      \r\n-      // Future predictions\r\n-      for (let i = 1; i <= 4; i++) {\r\n-        const futureTime = new Date(now.getTime() + i * 15 * 60000);\r\n-        mockData.push({\r\n-          time: futureTime.toLocaleTimeString(),\r\n-          actual: null,\r\n-          predicted: 25.5 + (Math.random() * 2 - 1)\r\n-        });\r\n-      }\r\n-      \r\n-      setPredictions(mockData);\r\n-    };\r\n-    \r\n+    // Gọi API khi component được tải\r\n     fetchPredictions();\r\n-    const interval = setInterval(fetchPredictions, 300000); // Update every 5 minutes\r\n     \r\n+    // Cập nhật dữ liệu mỗi 5 phút\r\n+    const interval = setInterval(fetchPredictions, 300000);\r\n     return () => clearInterval(interval);\r\n   }, []);\r\n   \r\n-  if (isLoading && predictions.length === 0) {\r\n-    return <div className=\"loading\">Loading predictions...</div>;\r\n+  // Hiển thị trạng thái đang tải\r\n+  if (isLoading) {\r\n+    return (\r\n+      <div className=\"prediction-loading\">\r\n+        <div className=\"loader\"></div>\r\n+        <p>Đang tải dự đoán nhiệt độ...</p>\r\n+      </div>\r\n+    );\r\n   }\r\n   \r\n-  // Find the latest prediction for the next hour\r\n-  const nextHourPredictions = predictions\r\n-    .filter(p => p.predicted !== null)\r\n-    .sort((a, b) => {\r\n-      const timeA = a.time.split(':').map(Number);\r\n-      const timeB = b.time.split(':').map(Number);\r\n-      return (timeA[0] * 60 + timeA[1]) - (timeB[0] * 60 + timeB[1]);\r\n-    });\r\n-  \r\n-  const maxPredictedTemp = nextHourPredictions.length > 0 \r\n-    ? Math.max(...nextHourPredictions.map(p => p.predicted).filter(p => p !== null))\r\n-    : null;\r\n-  \r\n-  const currentTemp = predictions.find(p => p.actual !== null)?.actual || 'N/A';\r\n-  \r\n   return (\r\n-    <div className=\"prediction-chart\">\r\n-      {error && <div className=\"error-message\">{error}</div>}\r\n+    <div className=\"prediction-chart-container\">\r\n+      {error && <div className=\"prediction-error\">{error}</div>}\r\n       \r\n-      <ResponsiveContainer width=\"100%\" height={200}>\r\n-        <LineChart data={predictions}>\r\n-          <CartesianGrid strokeDasharray=\"3 3\" />\r\n-          <XAxis dataKey=\"time\" />\r\n-          <YAxis \r\n-            domain={['dataMin - 1', 'dataMax + 1']} \r\n-          />\r\n-          <Tooltip formatter={(value) => value !== null ? `${value.toFixed(1)}°C` : 'N/A'} />\r\n-          <Legend />\r\n-          <Line \r\n-            type=\"monotone\" \r\n-            dataKey=\"actual\" \r\n-            name=\"Actual\" \r\n-            stroke=\"#8884d8\" \r\n-            activeDot={{ r: 8 }} \r\n-            strokeWidth={2}\r\n-          />\r\n-          <Line \r\n-            type=\"monotone\" \r\n-            dataKey=\"predicted\" \r\n-            name=\"Predicted\" \r\n-            stroke=\"#ff7300\" \r\n-            strokeDasharray=\"5 5\"\r\n-            activeDot={{ r: 6 }} \r\n-          />\r\n-        </LineChart>\r\n-      </ResponsiveContainer>\r\n+      <div className=\"prediction-chart\">\r\n+        {predictions.length > 0 ? (\r\n+          <ResponsiveContainer width=\"100%\" height={150}>\r\n+            <LineChart data={predictions} margin={{ top: 5, right: 20, left: 0, bottom: 5 }}>\r\n+              <CartesianGrid strokeDasharray=\"3 3\" />\r\n+              <XAxis dataKey=\"time\" tick={{ fontSize: 10 }} />\r\n+              <YAxis domain={['dataMin - 1', 'dataMax + 1']} tick={{ fontSize: 10 }} />\r\n+              <Tooltip \r\n+                formatter={(value) => value !== null ? `${value.toFixed(1)}°C` : 'N/A'}\r\n+                labelFormatter={(time) => `Thời gian: ${time}`}\r\n+              />\r\n+              <Legend wrapperStyle={{ fontSize: 10 }} />\r\n+              <Line \r\n+                type=\"monotone\" \r\n+                dataKey=\"actual\" \r\n+                name=\"Thực tế\" \r\n+                stroke=\"#8884d8\" \r\n+                activeDot={{ r: 6 }} \r\n+                strokeWidth={2}\r\n+                dot={{ r: 4 }}\r\n+              />\r\n+              <Line \r\n+                type=\"monotone\" \r\n+                dataKey=\"predicted\" \r\n+                name=\"Dự đoán\" \r\n+                stroke=\"#ff7300\" \r\n+                strokeDasharray=\"5 5\"\r\n+                dot={{ r: 4 }}\r\n+              />\r\n+            </LineChart>\r\n+          </ResponsiveContainer>\r\n+        ) : (\r\n+          <div className=\"no-data-message\">Không có dữ liệu dự đoán</div>\r\n+        )}\r\n+      </div>\r\n       \r\n       <div className=\"prediction-info\">\r\n         <div className=\"prediction-stat\">\r\n-          <span className=\"label\">Current:</span>\r\n-          <span className=\"value\">{typeof currentTemp === 'number' ? `${currentTemp.toFixed(1)}°C` : currentTemp}</span>\r\n+          <span className=\"stat-label\">Hiện tại:</span>\r\n+          <span className=\"stat-value\">{currentTemp}°C</span>\r\n         </div>\r\n-        \r\n         <div className=\"prediction-stat\">\r\n-          <span className=\"label\">Max Predicted:</span>\r\n-          <span className=\"value\">\r\n-            {maxPredictedTemp !== null ? `${maxPredictedTemp.toFixed(1)}°C` : 'N/A'}\r\n-          </span>\r\n+          <span className=\"stat-label\">Dự đoán cao nhất:</span>\r\n+          <span className=\"stat-value\">{maxPredicted}°C</span>\r\n         </div>\r\n       </div>\r\n     </div>\r\n   );\r\n"
                }
            ],
            "date": 1746510306861,
            "name": "Commit-0",
            "content": "// frontend/src/components/PredictionChart.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\nimport apiService from '../services/apiService';\r\n\r\nconst PredictionChart = () => {\r\n  const [predictions, setPredictions] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  \r\n  useEffect(() => {\r\n    const fetchPredictions = async () => {\r\n      setIsLoading(true);\r\n      setError(null);\r\n      try {\r\n        console.log('Fetching temperature predictions...');\r\n        const response = await apiService.get('/predictions');\r\n        \r\n        if (response.data && response.data.data) {\r\n          // Format the data for the chart\r\n          const formattedData = response.data.data.map(pred => ({\r\n            ...pred,\r\n            time: new Date(pred.time).toLocaleTimeString(),\r\n            // Ensure values are numeric\r\n            predicted: pred.predicted !== null ? parseFloat(pred.predicted) : null,\r\n            actual: pred.actual !== null ? parseFloat(pred.actual) : null\r\n          }));\r\n          \r\n          console.log('Received prediction data:', formattedData);\r\n          setPredictions(formattedData);\r\n        } else {\r\n          console.log('No prediction data in response');\r\n          // Use mock data if no predictions are available yet\r\n          createMockData();\r\n        }\r\n      } catch (error) {\r\n        console.error('Failed to fetch predictions:', error);\r\n        setError('Failed to load predictions. Using sample data instead.');\r\n        // Use mock data if API fails\r\n        createMockData();\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    \r\n    // Create mock data for development/fallback\r\n    const createMockData = () => {\r\n      const mockData = [];\r\n      const now = new Date();\r\n      \r\n      // Current reading\r\n      mockData.push({\r\n        time: now.toLocaleTimeString(),\r\n        actual: 25.5,\r\n        predicted: null\r\n      });\r\n      \r\n      // Future predictions\r\n      for (let i = 1; i <= 4; i++) {\r\n        const futureTime = new Date(now.getTime() + i * 15 * 60000);\r\n        mockData.push({\r\n          time: futureTime.toLocaleTimeString(),\r\n          actual: null,\r\n          predicted: 25.5 + (Math.random() * 2 - 1)\r\n        });\r\n      }\r\n      \r\n      setPredictions(mockData);\r\n    };\r\n    \r\n    fetchPredictions();\r\n    const interval = setInterval(fetchPredictions, 300000); // Update every 5 minutes\r\n    \r\n    return () => clearInterval(interval);\r\n  }, []);\r\n  \r\n  if (isLoading && predictions.length === 0) {\r\n    return <div className=\"loading\">Loading predictions...</div>;\r\n  }\r\n  \r\n  // Find the latest prediction for the next hour\r\n  const nextHourPredictions = predictions\r\n    .filter(p => p.predicted !== null)\r\n    .sort((a, b) => {\r\n      const timeA = a.time.split(':').map(Number);\r\n      const timeB = b.time.split(':').map(Number);\r\n      return (timeA[0] * 60 + timeA[1]) - (timeB[0] * 60 + timeB[1]);\r\n    });\r\n  \r\n  const maxPredictedTemp = nextHourPredictions.length > 0 \r\n    ? Math.max(...nextHourPredictions.map(p => p.predicted).filter(p => p !== null))\r\n    : null;\r\n  \r\n  const currentTemp = predictions.find(p => p.actual !== null)?.actual || 'N/A';\r\n  \r\n  return (\r\n    <div className=\"prediction-chart\">\r\n      {error && <div className=\"error-message\">{error}</div>}\r\n      \r\n      <ResponsiveContainer width=\"100%\" height={200}>\r\n        <LineChart data={predictions}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"time\" />\r\n          <YAxis \r\n            domain={['dataMin - 1', 'dataMax + 1']} \r\n          />\r\n          <Tooltip formatter={(value) => value !== null ? `${value.toFixed(1)}°C` : 'N/A'} />\r\n          <Legend />\r\n          <Line \r\n            type=\"monotone\" \r\n            dataKey=\"actual\" \r\n            name=\"Actual\" \r\n            stroke=\"#8884d8\" \r\n            activeDot={{ r: 8 }} \r\n            strokeWidth={2}\r\n          />\r\n          <Line \r\n            type=\"monotone\" \r\n            dataKey=\"predicted\" \r\n            name=\"Predicted\" \r\n            stroke=\"#ff7300\" \r\n            strokeDasharray=\"5 5\"\r\n            activeDot={{ r: 6 }} \r\n          />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n      \r\n      <div className=\"prediction-info\">\r\n        <div className=\"prediction-stat\">\r\n          <span className=\"label\">Current:</span>\r\n          <span className=\"value\">{typeof currentTemp === 'number' ? `${currentTemp.toFixed(1)}°C` : currentTemp}</span>\r\n        </div>\r\n        \r\n        <div className=\"prediction-stat\">\r\n          <span className=\"label\">Max Predicted:</span>\r\n          <span className=\"value\">\r\n            {maxPredictedTemp !== null ? `${maxPredictedTemp.toFixed(1)}°C` : 'N/A'}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PredictionChart;"
        }
    ]
}