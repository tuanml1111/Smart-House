{
    "sourceFile": "frontend/src/components/AIPrediction/AIPrediction.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1746518104100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746518303659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,17 +142,8 @@\n             ) : (\r\n               <div className=\"no-data-message\">Không có dữ liệu dự đoán</div>\r\n             )}\r\n           </div>\r\n-          \r\n-          <div className=\"prediction-details\">\r\n-            <h2>Thông tin chi tiết</h2>\r\n-            <div className=\"details-content\">\r\n-              <p>Mô hình dự đoán nhiệt độ được huấn luyện bằng Decision Tree Regressor trên dữ liệu lịch sử của cảm biến trong hệ thống.</p>\r\n-              <p>Các yếu tố ảnh hưởng đến dự đoán bao gồm: thời gian trong ngày, nhiệt độ hiện tại, và xu hướng thay đổi nhiệt độ gần đây.</p>\r\n-              <p>Độ tin cậy của dự đoán: <strong>80-85%</strong></p>\r\n-            </div>\r\n-          </div>\r\n         </div>\r\n       )}\r\n     </div>\r\n   );\r\n"
                },
                {
                    "date": 1746518369679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n \r\n   return (\r\n     <div className=\"ai-prediction-container\">\r\n       <div className=\"ai-prediction-header\">\r\n-        <h1>Dự đoán nhiệt độ AI</h1>\r\n+        <h1>Biểu đồ dự đoán nhiệt độ</h1>\r\n         <p className=\"header-description\">\r\n           Hệ thống AI dự đoán nhiệt độ trong 60 phút tới dựa trên dữ liệu cảm biến và mô hình máy học.\r\n         </p>\r\n       </div>\r\n"
                },
                {
                    "date": 1746519043765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,166 @@\n+// frontend/src/components/AIPrediction/AIPrediction.jsx\r\n+import React, { useState, useEffect } from 'react';\r\n+import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\n+import apiService from '../../services/apiService';\r\n+import './AIPrediction.css';\r\n+\r\n+const AIPrediction = () => {\r\n+  const [predictions, setPredictions] = useState([]);\r\n+  const [isLoading, setIsLoading] = useState(true);\r\n+  const [error, setError] = useState(null);\r\n+  const [currentTemp, setCurrentTemp] = useState('N/A');\r\n+  const [maxPredicted, setMaxPredicted] = useState('N/A');\r\n+  \r\n+  useEffect(() => {\r\n+    const fetchPredictions = async () => {\r\n+      setIsLoading(true);\r\n+      setError(null);\r\n+      \r\n+      try {\r\n+        console.log('Đang lấy dữ liệu dự đoán nhiệt độ...');\r\n+        const response = await apiService.get('/predictions');\r\n+        console.log('Phản hồi API:', response.data);\r\n+        \r\n+        if (response.data && response.data.data && response.data.data.length > 0) {\r\n+          // Định dạng dữ liệu cho biểu đồ\r\n+          const formattedData = response.data.data.map(pred => ({\r\n+            time: new Date(pred.time).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}),\r\n+            predicted: pred.predicted !== null ? parseFloat(pred.predicted) : null,\r\n+            actual: pred.actual !== null ? parseFloat(pred.actual) : null\r\n+          }));\r\n+          \r\n+          console.log('Dữ liệu đã định dạng:', formattedData);\r\n+          setPredictions(formattedData);\r\n+          \r\n+          // Đặt nhiệt độ hiện tại và dự đoán tối đa\r\n+          const actualTemp = formattedData.find(p => p.actual !== null)?.actual;\r\n+          if (actualTemp !== undefined) {\r\n+            setCurrentTemp(actualTemp.toFixed(1));\r\n+          }\r\n+          \r\n+          const predictedValues = formattedData\r\n+            .filter(p => p.predicted !== null)\r\n+            .map(p => p.predicted);\r\n+            \r\n+          if (predictedValues.length > 0) {\r\n+            setMaxPredicted(Math.max(...predictedValues).toFixed(1));\r\n+          }\r\n+        } else {\r\n+          console.log('Không có dữ liệu dự đoán. Hiển thị thông báo.');\r\n+          setPredictions([]);\r\n+          setError('Không có dữ liệu dự đoán. Vui lòng thử lại sau.');\r\n+        }\r\n+      } catch (error) {\r\n+        console.error('Lỗi khi lấy dữ liệu dự đoán:', error);\r\n+        setError('Không thể kết nối đến máy chủ dự đoán.');\r\n+        setPredictions([]);\r\n+      } finally {\r\n+        setIsLoading(false);\r\n+      }\r\n+    };\r\n+    \r\n+    // Gọi API khi component được tải\r\n+    fetchPredictions();\r\n+    \r\n+    // Cập nhật dữ liệu mỗi 5 phút\r\n+    const interval = setInterval(fetchPredictions, 300000);\r\n+    return () => clearInterval(interval);\r\n+  }, []);\r\n+\r\n+  return (\r\n+    <div className=\"ai-prediction-container\">\r\n+      <div className=\"ai-prediction-header\">\r\n+        <h1>Biểu đồ dự đoán nhiệt độ</h1>\r\n+        <p className=\"header-description\">\r\n+          Hệ thống AI dự đoán nhiệt độ trong 60 phút tới dựa trên dữ liệu cảm biến và mô hình máy học.\r\n+        </p>\r\n+      </div>\r\n+\r\n+      {error && <div className=\"prediction-error\">{error}</div>}\r\n+      \r\n+      {isLoading ? (\r\n+        <div className=\"prediction-loading\">\r\n+          <div className=\"loader\"></div>\r\n+          <p>Đang tải dữ liệu dự đoán nhiệt độ...</p>\r\n+        </div>\r\n+      ) : (\r\n+        <div className=\"prediction-content\">\r\n+          <div className=\"stats-container\">\r\n+            <div className=\"stat-card\">\r\n+              <div className=\"stat-icon temperature\">\r\n+                <i className=\"fas fa-thermometer-half\"></i>\r\n+              </div>\r\n+              <div className=\"stat-info\">\r\n+                <span className=\"stat-label\">Nhiệt độ hiện tại</span>\r\n+                <span className=\"stat-value\">{currentTemp}°C</span>\r\n+              </div>\r\n+            </div>\r\n+            \r\n+            <div className=\"stat-card\">\r\n+              <div className=\"stat-icon prediction\">\r\n+                <i className=\"fas fa-chart-line\"></i>\r\n+              </div>\r\n+              <div className=\"stat-info\">\r\n+                <span className=\"stat-label\">Dự đoán cao nhất</span>\r\n+                <span className=\"stat-value\">{maxPredicted}°C</span>\r\n+              </div>\r\n+            </div>\r\n+          </div>\r\n+          \r\n+          <div className=\"chart-container\">\r\n+            <h2>Biểu đồ dự đoán nhiệt độ</h2>\r\n+            {predictions.length > 0 ? (\r\n+              <ResponsiveContainer width=\"100%\" height={300}>\r\n+                <LineChart data={predictions} margin={{ top: 20, right: 30, left: 20, bottom: 20 }}>\r\n+                  <CartesianGrid strokeDasharray=\"3 3\" />\r\n+                  <XAxis dataKey=\"time\" />\r\n+                  {/* Sửa trục Y để hiển thị đúng định dạng nhiệt độ */}\r\n+                  <YAxis \r\n+                    domain={['dataMin - 1', 'dataMax + 1']} \r\n+                    tickFormatter={(value) => `${value.toFixed(1)}°C`}\r\n+                    width={65}\r\n+                  />\r\n+                  <Tooltip \r\n+                    formatter={(value) => value !== null ? `${value.toFixed(1)}°C` : 'N/A'}\r\n+                    labelFormatter={(time) => `Thời gian: ${time}`}\r\n+                  />\r\n+                  <Legend />\r\n+                  <Line \r\n+                    type=\"monotone\" \r\n+                    dataKey=\"actual\" \r\n+                    name=\"Thực tế\" \r\n+                    stroke=\"#8884d8\" \r\n+                    activeDot={{ r: 8 }} \r\n+                    strokeWidth={2}\r\n+                    dot={{ r: 4 }}\r\n+                  />\r\n+                  <Line \r\n+                    type=\"monotone\" \r\n+                    dataKey=\"predicted\" \r\n+                    name=\"Dự đoán\" \r\n+                    stroke=\"#ff7300\" \r\n+                    strokeDasharray=\"5 5\"\r\n+                    dot={{ r: 4 }}\r\n+                  />\r\n+                </LineChart>\r\n+              </ResponsiveContainer>\r\n+            ) : (\r\n+              <div className=\"no-data-message\">Không có dữ liệu dự đoán</div>\r\n+            )}\r\n+          </div>\r\n+          \r\n+          <div className=\"prediction-details\">\r\n+            <h2>Thông tin chi tiết</h2>\r\n+            <div className=\"details-content\">\r\n+              <p>Mô hình dự đoán nhiệt độ được huấn luyện bằng Decision Tree Regressor trên dữ liệu lịch sử của cảm biến trong hệ thống.</p>\r\n+              <p>Các yếu tố ảnh hưởng đến dự đoán bao gồm: thời gian trong ngày, nhiệt độ hiện tại, và xu hướng thay đổi nhiệt độ gần đây.</p>\r\n+              <p>Độ tin cậy của dự đoán: <strong>80-85%</strong></p>\r\n+            </div>\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default AIPrediction;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1746519058117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,171 +148,11 @@\n               <div className=\"no-data-message\">Không có dữ liệu dự đoán</div>\r\n             )}\r\n           </div>\r\n           \r\n-          <div className=\"prediction-details\">\r\n-            <h2>Thông tin chi tiết</h2>\r\n-            <div className=\"details-content\">\r\n-              <p>Mô hình dự đoán nhiệt độ được huấn luyện bằng Decision Tree Regressor trên dữ liệu lịch sử của cảm biến trong hệ thống.</p>\r\n-              <p>Các yếu tố ảnh hưởng đến dự đoán bao gồm: thời gian trong ngày, nhiệt độ hiện tại, và xu hướng thay đổi nhiệt độ gần đây.</p>\r\n-              <p>Độ tin cậy của dự đoán: <strong>80-85%</strong></p>\r\n-            </div>\r\n-          </div>\r\n         </div>\r\n       )}\r\n     </div>\r\n   );\r\n };\r\n \r\n-export default AIPrediction;\n-// frontend/src/components/AIPrediction/AIPrediction.jsx\r\n-import React, { useState, useEffect } from 'react';\r\n-import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\n-import apiService from '../../services/apiService';\r\n-import './AIPrediction.css';\r\n-\r\n-const AIPrediction = () => {\r\n-  const [predictions, setPredictions] = useState([]);\r\n-  const [isLoading, setIsLoading] = useState(true);\r\n-  const [error, setError] = useState(null);\r\n-  const [currentTemp, setCurrentTemp] = useState('N/A');\r\n-  const [maxPredicted, setMaxPredicted] = useState('N/A');\r\n-  \r\n-  useEffect(() => {\r\n-    const fetchPredictions = async () => {\r\n-      setIsLoading(true);\r\n-      setError(null);\r\n-      \r\n-      try {\r\n-        console.log('Đang lấy dữ liệu dự đoán nhiệt độ...');\r\n-        const response = await apiService.get('/predictions');\r\n-        console.log('Phản hồi API:', response.data);\r\n-        \r\n-        if (response.data && response.data.data && response.data.data.length > 0) {\r\n-          // Định dạng dữ liệu cho biểu đồ\r\n-          const formattedData = response.data.data.map(pred => ({\r\n-            time: new Date(pred.time).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}),\r\n-            predicted: pred.predicted !== null ? parseFloat(pred.predicted) : null,\r\n-            actual: pred.actual !== null ? parseFloat(pred.actual) : null\r\n-          }));\r\n-          \r\n-          console.log('Dữ liệu đã định dạng:', formattedData);\r\n-          setPredictions(formattedData);\r\n-          \r\n-          // Đặt nhiệt độ hiện tại và dự đoán tối đa\r\n-          const actualTemp = formattedData.find(p => p.actual !== null)?.actual;\r\n-          if (actualTemp !== undefined) {\r\n-            setCurrentTemp(actualTemp.toFixed(1));\r\n-          }\r\n-          \r\n-          const predictedValues = formattedData\r\n-            .filter(p => p.predicted !== null)\r\n-            .map(p => p.predicted);\r\n-            \r\n-          if (predictedValues.length > 0) {\r\n-            setMaxPredicted(Math.max(...predictedValues).toFixed(1));\r\n-          }\r\n-        } else {\r\n-          console.log('Không có dữ liệu dự đoán. Hiển thị thông báo.');\r\n-          setPredictions([]);\r\n-          setError('Không có dữ liệu dự đoán. Vui lòng thử lại sau.');\r\n-        }\r\n-      } catch (error) {\r\n-        console.error('Lỗi khi lấy dữ liệu dự đoán:', error);\r\n-        setError('Không thể kết nối đến máy chủ dự đoán.');\r\n-        setPredictions([]);\r\n-      } finally {\r\n-        setIsLoading(false);\r\n-      }\r\n-    };\r\n-    \r\n-    // Gọi API khi component được tải\r\n-    fetchPredictions();\r\n-    \r\n-    // Cập nhật dữ liệu mỗi 5 phút\r\n-    const interval = setInterval(fetchPredictions, 300000);\r\n-    return () => clearInterval(interval);\r\n-  }, []);\r\n-\r\n-  return (\r\n-    <div className=\"ai-prediction-container\">\r\n-      <div className=\"ai-prediction-header\">\r\n-        <h1>Biểu đồ dự đoán nhiệt độ</h1>\r\n-        <p className=\"header-description\">\r\n-          Hệ thống AI dự đoán nhiệt độ trong 60 phút tới dựa trên dữ liệu cảm biến và mô hình máy học.\r\n-        </p>\r\n-      </div>\r\n-\r\n-      {error && <div className=\"prediction-error\">{error}</div>}\r\n-      \r\n-      {isLoading ? (\r\n-        <div className=\"prediction-loading\">\r\n-          <div className=\"loader\"></div>\r\n-          <p>Đang tải dữ liệu dự đoán nhiệt độ...</p>\r\n-        </div>\r\n-      ) : (\r\n-        <div className=\"prediction-content\">\r\n-          <div className=\"stats-container\">\r\n-            <div className=\"stat-card\">\r\n-              <div className=\"stat-icon temperature\">\r\n-                <i className=\"fas fa-thermometer-half\"></i>\r\n-              </div>\r\n-              <div className=\"stat-info\">\r\n-                <span className=\"stat-label\">Nhiệt độ hiện tại</span>\r\n-                <span className=\"stat-value\">{currentTemp}°C</span>\r\n-              </div>\r\n-            </div>\r\n-            \r\n-            <div className=\"stat-card\">\r\n-              <div className=\"stat-icon prediction\">\r\n-                <i className=\"fas fa-chart-line\"></i>\r\n-              </div>\r\n-              <div className=\"stat-info\">\r\n-                <span className=\"stat-label\">Dự đoán cao nhất</span>\r\n-                <span className=\"stat-value\">{maxPredicted}°C</span>\r\n-              </div>\r\n-            </div>\r\n-          </div>\r\n-          \r\n-          <div className=\"chart-container\">\r\n-            <h2>Biểu đồ dự đoán nhiệt độ</h2>\r\n-            {predictions.length > 0 ? (\r\n-              <ResponsiveContainer width=\"100%\" height={300}>\r\n-                <LineChart data={predictions} margin={{ top: 20, right: 30, left: 20, bottom: 20 }}>\r\n-                  <CartesianGrid strokeDasharray=\"3 3\" />\r\n-                  <XAxis dataKey=\"time\" />\r\n-                  <YAxis domain={['dataMin - 1', 'dataMax + 1']} />\r\n-                  <Tooltip \r\n-                    formatter={(value) => value !== null ? `${value.toFixed(1)}°C` : 'N/A'}\r\n-                    labelFormatter={(time) => `Thời gian: ${time}`}\r\n-                  />\r\n-                  <Legend />\r\n-                  <Line \r\n-                    type=\"monotone\" \r\n-                    dataKey=\"actual\" \r\n-                    name=\"Thực tế\" \r\n-                    stroke=\"#8884d8\" \r\n-                    activeDot={{ r: 8 }} \r\n-                    strokeWidth={2}\r\n-                    dot={{ r: 4 }}\r\n-                  />\r\n-                  <Line \r\n-                    type=\"monotone\" \r\n-                    dataKey=\"predicted\" \r\n-                    name=\"Dự đoán\" \r\n-                    stroke=\"#ff7300\" \r\n-                    strokeDasharray=\"5 5\"\r\n-                    dot={{ r: 4 }}\r\n-                  />\r\n-                </LineChart>\r\n-              </ResponsiveContainer>\r\n-            ) : (\r\n-              <div className=\"no-data-message\">Không có dữ liệu dự đoán</div>\r\n-            )}\r\n-          </div>\r\n-        </div>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n export default AIPrediction;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1746519127067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n     <div className=\"ai-prediction-container\">\r\n       <div className=\"ai-prediction-header\">\r\n         <h1>Biểu đồ dự đoán nhiệt độ</h1>\r\n         <p className=\"header-description\">\r\n-          Hệ thống AI dự đoán nhiệt độ trong 60 phút tới dựa trên dữ liệu cảm biến và mô hình máy học.\r\n+          Hệ thống AI dự đoán nhiệt độ trong 60 phút tới dựa trên dữ liệu cảm biến và mô hình randomforest.\r\n         </p>\r\n       </div>\r\n \r\n       {error && <div className=\"prediction-error\">{error}</div>}\r\n"
                }
            ],
            "date": 1746518104100,
            "name": "Commit-0",
            "content": "// frontend/src/components/AIPrediction/AIPrediction.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\nimport apiService from '../../services/apiService';\r\nimport './AIPrediction.css';\r\n\r\nconst AIPrediction = () => {\r\n  const [predictions, setPredictions] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [currentTemp, setCurrentTemp] = useState('N/A');\r\n  const [maxPredicted, setMaxPredicted] = useState('N/A');\r\n  \r\n  useEffect(() => {\r\n    const fetchPredictions = async () => {\r\n      setIsLoading(true);\r\n      setError(null);\r\n      \r\n      try {\r\n        console.log('Đang lấy dữ liệu dự đoán nhiệt độ...');\r\n        const response = await apiService.get('/predictions');\r\n        console.log('Phản hồi API:', response.data);\r\n        \r\n        if (response.data && response.data.data && response.data.data.length > 0) {\r\n          // Định dạng dữ liệu cho biểu đồ\r\n          const formattedData = response.data.data.map(pred => ({\r\n            time: new Date(pred.time).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}),\r\n            predicted: pred.predicted !== null ? parseFloat(pred.predicted) : null,\r\n            actual: pred.actual !== null ? parseFloat(pred.actual) : null\r\n          }));\r\n          \r\n          console.log('Dữ liệu đã định dạng:', formattedData);\r\n          setPredictions(formattedData);\r\n          \r\n          // Đặt nhiệt độ hiện tại và dự đoán tối đa\r\n          const actualTemp = formattedData.find(p => p.actual !== null)?.actual;\r\n          if (actualTemp !== undefined) {\r\n            setCurrentTemp(actualTemp.toFixed(1));\r\n          }\r\n          \r\n          const predictedValues = formattedData\r\n            .filter(p => p.predicted !== null)\r\n            .map(p => p.predicted);\r\n            \r\n          if (predictedValues.length > 0) {\r\n            setMaxPredicted(Math.max(...predictedValues).toFixed(1));\r\n          }\r\n        } else {\r\n          console.log('Không có dữ liệu dự đoán. Hiển thị thông báo.');\r\n          setPredictions([]);\r\n          setError('Không có dữ liệu dự đoán. Vui lòng thử lại sau.');\r\n        }\r\n      } catch (error) {\r\n        console.error('Lỗi khi lấy dữ liệu dự đoán:', error);\r\n        setError('Không thể kết nối đến máy chủ dự đoán.');\r\n        setPredictions([]);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    \r\n    // Gọi API khi component được tải\r\n    fetchPredictions();\r\n    \r\n    // Cập nhật dữ liệu mỗi 5 phút\r\n    const interval = setInterval(fetchPredictions, 300000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"ai-prediction-container\">\r\n      <div className=\"ai-prediction-header\">\r\n        <h1>Dự đoán nhiệt độ AI</h1>\r\n        <p className=\"header-description\">\r\n          Hệ thống AI dự đoán nhiệt độ trong 60 phút tới dựa trên dữ liệu cảm biến và mô hình máy học.\r\n        </p>\r\n      </div>\r\n\r\n      {error && <div className=\"prediction-error\">{error}</div>}\r\n      \r\n      {isLoading ? (\r\n        <div className=\"prediction-loading\">\r\n          <div className=\"loader\"></div>\r\n          <p>Đang tải dữ liệu dự đoán nhiệt độ...</p>\r\n        </div>\r\n      ) : (\r\n        <div className=\"prediction-content\">\r\n          <div className=\"stats-container\">\r\n            <div className=\"stat-card\">\r\n              <div className=\"stat-icon temperature\">\r\n                <i className=\"fas fa-thermometer-half\"></i>\r\n              </div>\r\n              <div className=\"stat-info\">\r\n                <span className=\"stat-label\">Nhiệt độ hiện tại</span>\r\n                <span className=\"stat-value\">{currentTemp}°C</span>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"stat-card\">\r\n              <div className=\"stat-icon prediction\">\r\n                <i className=\"fas fa-chart-line\"></i>\r\n              </div>\r\n              <div className=\"stat-info\">\r\n                <span className=\"stat-label\">Dự đoán cao nhất</span>\r\n                <span className=\"stat-value\">{maxPredicted}°C</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"chart-container\">\r\n            <h2>Biểu đồ dự đoán nhiệt độ</h2>\r\n            {predictions.length > 0 ? (\r\n              <ResponsiveContainer width=\"100%\" height={300}>\r\n                <LineChart data={predictions} margin={{ top: 20, right: 30, left: 20, bottom: 20 }}>\r\n                  <CartesianGrid strokeDasharray=\"3 3\" />\r\n                  <XAxis dataKey=\"time\" />\r\n                  <YAxis domain={['dataMin - 1', 'dataMax + 1']} />\r\n                  <Tooltip \r\n                    formatter={(value) => value !== null ? `${value.toFixed(1)}°C` : 'N/A'}\r\n                    labelFormatter={(time) => `Thời gian: ${time}`}\r\n                  />\r\n                  <Legend />\r\n                  <Line \r\n                    type=\"monotone\" \r\n                    dataKey=\"actual\" \r\n                    name=\"Thực tế\" \r\n                    stroke=\"#8884d8\" \r\n                    activeDot={{ r: 8 }} \r\n                    strokeWidth={2}\r\n                    dot={{ r: 4 }}\r\n                  />\r\n                  <Line \r\n                    type=\"monotone\" \r\n                    dataKey=\"predicted\" \r\n                    name=\"Dự đoán\" \r\n                    stroke=\"#ff7300\" \r\n                    strokeDasharray=\"5 5\"\r\n                    dot={{ r: 4 }}\r\n                  />\r\n                </LineChart>\r\n              </ResponsiveContainer>\r\n            ) : (\r\n              <div className=\"no-data-message\">Không có dữ liệu dự đoán</div>\r\n            )}\r\n          </div>\r\n          \r\n          <div className=\"prediction-details\">\r\n            <h2>Thông tin chi tiết</h2>\r\n            <div className=\"details-content\">\r\n              <p>Mô hình dự đoán nhiệt độ được huấn luyện bằng Decision Tree Regressor trên dữ liệu lịch sử của cảm biến trong hệ thống.</p>\r\n              <p>Các yếu tố ảnh hưởng đến dự đoán bao gồm: thời gian trong ngày, nhiệt độ hiện tại, và xu hướng thay đổi nhiệt độ gần đây.</p>\r\n              <p>Độ tin cậy của dự đoán: <strong>80-85%</strong></p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AIPrediction;"
        }
    ]
}