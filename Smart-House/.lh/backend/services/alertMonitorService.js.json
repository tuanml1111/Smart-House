{
    "sourceFile": "backend/services/alertMonitorService.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1746468995692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746469427863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,25 +14,22 @@\n \r\n   start() {\r\n     if (this.isRunning) {\r\n       logger.info('Alert monitor service is already running');\r\n-      return false; // Trả về false nếu đã chạy\r\n+      return;\r\n     }\r\n-  \r\n+\r\n     // Check for alerts every minute\r\n     this.job = setInterval(async () => {\r\n       try {\r\n-        console.log(`[${new Date().toLocaleTimeString()}] Đang chạy kiểm tra cảnh báo định kỳ...`);\r\n         await this.checkThresholds();\r\n-        console.log(`[${new Date().toLocaleTimeString()}] Kiểm tra cảnh báo hoàn tất`);\r\n       } catch (error) {\r\n         logger.error(`Error checking alert thresholds: ${error.message}`);\r\n       }\r\n     }, 60000); // 60000ms = 1 minute\r\n-  \r\n+\r\n     this.isRunning = true;\r\n     logger.info('Alert monitor service started successfully');\r\n-    return true; // Trả về true khi khởi động thành công\r\n   }\r\n \r\n   stop() {\r\n     if (this.job) {\r\n"
                },
                {
                    "date": 1746469822915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,8 @@\n   constructor() {\r\n     this.isRunning = false;\r\n     this.checkInterval = '*/1 * * * *'; // Check every minute\r\n     this.lastCheckedValues = {}; // Store previous values\r\n-    this.activeAlerts = {}; // Track currently active alerts by sensor type and condition\r\n   }\r\n \r\n   start() {\r\n     if (this.isRunning) {\r\n@@ -70,109 +69,29 @@\n           continue;\r\n         }\r\n \r\n         const sensorValue = parseFloat(latestData.svalue);\r\n-        const sensorKey = `${sensor.sensor_id}`;\r\n+        console.log(`Checking ${sensor.sensor_type}: Current value: ${sensorValue}`);\r\n         \r\n         // Check against each config for this sensor type\r\n         for (const config of configs) {\r\n-          // Check if value exceeds high threshold\r\n+          console.log(`Checking against threshold: min=${config.min_value}, max=${config.max_value}`);\r\n+          \r\n+          // Check if value exceeds threshold\r\n           if (sensorValue > config.max_value) {\r\n-            const alertKey = `${sensor.sensor_id}_high`;\r\n-            \r\n-            // Only create alert if we don't already have an active one for this condition\r\n-            if (!this.activeAlerts[alertKey]) {\r\n-              console.log(`Creating high alert for ${sensor.sensor_type}: ${sensorValue} > ${config.max_value}`);\r\n-              const alert = await this.createAlert(sensor, 'High', sensorValue, config.max_value);\r\n-              if (alert) {\r\n-                // Mark this condition as having an active alert\r\n-                this.activeAlerts[alertKey] = alert.alert_id;\r\n-              }\r\n-            } else {\r\n-              console.log(`Alert already active for ${sensor.sensor_type} high threshold`);\r\n-            }\r\n-          } \r\n-          // If value is back below threshold, clear the active alert marker\r\n-          else if (sensorValue <= config.max_value) {\r\n-            const alertKey = `${sensor.sensor_id}_high`;\r\n-            if (this.activeAlerts[alertKey]) {\r\n-              console.log(`Clearing active high alert marker for ${sensor.sensor_type}`);\r\n-              delete this.activeAlerts[alertKey];\r\n-            }\r\n+            console.log(`Alert threshold exceeded! ${sensorValue} > ${config.max_value}`);\r\n+            await this.createAlert(sensor, 'High', sensorValue, config.max_value);\r\n+          } else if (sensorValue < config.min_value) {\r\n+            console.log(`Alert threshold exceeded! ${sensorValue} < ${config.min_value}`);\r\n+            await this.createAlert(sensor, 'Low', sensorValue, config.min_value);\r\n           }\r\n-          \r\n-          // Check if value is below low threshold\r\n-          if (sensorValue < config.min_value) {\r\n-            const alertKey = `${sensor.sensor_id}_low`;\r\n-            \r\n-            // Only create alert if we don't already have an active one for this condition\r\n-            if (!this.activeAlerts[alertKey]) {\r\n-              console.log(`Creating low alert for ${sensor.sensor_type}: ${sensorValue} < ${config.min_value}`);\r\n-              const alert = await this.createAlert(sensor, 'Low', sensorValue, config.min_value);\r\n-              if (alert) {\r\n-                // Mark this condition as having an active alert\r\n-                this.activeAlerts[alertKey] = alert.alert_id;\r\n-              }\r\n-            } else {\r\n-              console.log(`Alert already active for ${sensor.sensor_type} low threshold`);\r\n-            }\r\n-          }\r\n-          // If value is back above threshold, clear the active alert marker\r\n-          else if (sensorValue >= config.min_value) {\r\n-            const alertKey = `${sensor.sensor_id}_low`;\r\n-            if (this.activeAlerts[alertKey]) {\r\n-              console.log(`Clearing active low alert marker for ${sensor.sensor_type}`);\r\n-              delete this.activeAlerts[alertKey];\r\n-            }\r\n-          }\r\n         }\r\n-        \r\n-        // Store the current value for next check\r\n-        this.lastCheckedValues[sensorKey] = sensorValue;\r\n       }\r\n-      \r\n-      // Check for resolved alerts\r\n-      await this.checkForResolvedAlerts();\r\n-      \r\n     } catch (error) {\r\n       logger.error(`Error in checkThresholds: ${error.message}`);\r\n       throw error;\r\n     }\r\n   }\r\n-  \r\n-  async checkForResolvedAlerts() {\r\n-    try {\r\n-      // Get all pending alerts\r\n-      const query = `\r\n-        SELECT a.alert_id, a.sensor_id, a.alert_type\r\n-        FROM alert a\r\n-        WHERE a.status = 'pending'\r\n-      `;\r\n-      \r\n-      const result = await db.query(query);\r\n-      \r\n-      for (const alert of result.rows) {\r\n-        // Extract if this is a high or low alert\r\n-        const isHighAlert = alert.alert_type.toLowerCase().includes('high');\r\n-        const alertKey = `${alert.sensor_id}_${isHighAlert ? 'high' : 'low'}`;\r\n-        \r\n-        // If alert is in DB but not in our active alerts map, mark it as resolved\r\n-        if (!this.activeAlerts[alertKey]) {\r\n-          logger.info(`Auto-resolving alert ID ${alert.alert_id} as condition is no longer active`);\r\n-          \r\n-          const updateQuery = `\r\n-            UPDATE alert\r\n-            SET status = 'resolved'\r\n-            WHERE alert_id = $1\r\n-          `;\r\n-          \r\n-          await db.query(updateQuery, [alert.alert_id]);\r\n-        }\r\n-      }\r\n-    } catch (error) {\r\n-      logger.error(`Error checking for resolved alerts: ${error.message}`);\r\n-    }\r\n-  }\r\n \r\n   async getAllActiveConfigs() {\r\n     try {\r\n       const query = `\r\n@@ -232,9 +151,8 @@\n       \r\n       return result.rows[0];\r\n     } catch (error) {\r\n       logger.error(`Error creating alert: ${error.message}`);\r\n-      return null;\r\n     }\r\n   }\r\n }\r\n \r\n"
                },
                {
                    "date": 1746469889894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,44 +1,16 @@\n-const SensorModel = require('../models/sensorModel');\r\n-const AlertConfigModel = require('../models/alertConfigModel');\r\n-const AlertModel = require('../models/alertModel');\r\n-const db = require('../config/db');\r\n-const logger = require('../utils/logger');\r\n+// In your alertMonitorService.js\r\n \r\n class AlertMonitorService {\r\n   constructor() {\r\n     this.isRunning = false;\r\n     this.checkInterval = '*/1 * * * *'; // Check every minute\r\n     this.lastCheckedValues = {}; // Store previous values\r\n+    this.activeAlerts = {}; // Track currently active alerts by sensor type and condition\r\n   }\r\n \r\n-  start() {\r\n-    if (this.isRunning) {\r\n-      logger.info('Alert monitor service is already running');\r\n-      return;\r\n-    }\r\n+  // ... other methods remain the same ...\r\n \r\n-    // Check for alerts every minute\r\n-    this.job = setInterval(async () => {\r\n-      try {\r\n-        await this.checkThresholds();\r\n-      } catch (error) {\r\n-        logger.error(`Error checking alert thresholds: ${error.message}`);\r\n-      }\r\n-    }, 60000); // 60000ms = 1 minute\r\n-\r\n-    this.isRunning = true;\r\n-    logger.info('Alert monitor service started successfully');\r\n-  }\r\n-\r\n-  stop() {\r\n-    if (this.job) {\r\n-      clearInterval(this.job);\r\n-      this.isRunning = false;\r\n-      logger.info('Alert monitor service stopped');\r\n-    }\r\n-  }\r\n-\r\n   async checkThresholds() {\r\n     logger.info('Checking sensor values against alert thresholds');\r\n \r\n     try {\r\n@@ -69,91 +41,111 @@\n           continue;\r\n         }\r\n \r\n         const sensorValue = parseFloat(latestData.svalue);\r\n-        console.log(`Checking ${sensor.sensor_type}: Current value: ${sensorValue}`);\r\n+        const sensorKey = `${sensor.sensor_id}`;\r\n         \r\n         // Check against each config for this sensor type\r\n         for (const config of configs) {\r\n-          console.log(`Checking against threshold: min=${config.min_value}, max=${config.max_value}`);\r\n-          \r\n-          // Check if value exceeds threshold\r\n+          // Check if value exceeds high threshold\r\n           if (sensorValue > config.max_value) {\r\n-            console.log(`Alert threshold exceeded! ${sensorValue} > ${config.max_value}`);\r\n-            await this.createAlert(sensor, 'High', sensorValue, config.max_value);\r\n-          } else if (sensorValue < config.min_value) {\r\n-            console.log(`Alert threshold exceeded! ${sensorValue} < ${config.min_value}`);\r\n-            await this.createAlert(sensor, 'Low', sensorValue, config.min_value);\r\n+            const alertKey = `${sensor.sensor_id}_high`;\r\n+            \r\n+            // Only create alert if we don't already have an active one for this condition\r\n+            if (!this.activeAlerts[alertKey]) {\r\n+              console.log(`Creating high alert for ${sensor.sensor_type}: ${sensorValue} > ${config.max_value}`);\r\n+              const alert = await this.createAlert(sensor, 'High', sensorValue, config.max_value);\r\n+              if (alert) {\r\n+                // Mark this condition as having an active alert\r\n+                this.activeAlerts[alertKey] = alert.alert_id;\r\n+              }\r\n+            } else {\r\n+              console.log(`Alert already active for ${sensor.sensor_type} high threshold`);\r\n+            }\r\n+          } \r\n+          // If value is back below threshold, clear the active alert marker\r\n+          else if (sensorValue <= config.max_value) {\r\n+            const alertKey = `${sensor.sensor_id}_high`;\r\n+            if (this.activeAlerts[alertKey]) {\r\n+              console.log(`Clearing active high alert marker for ${sensor.sensor_type}`);\r\n+              delete this.activeAlerts[alertKey];\r\n+            }\r\n           }\r\n+          \r\n+          // Check if value is below low threshold\r\n+          if (sensorValue < config.min_value) {\r\n+            const alertKey = `${sensor.sensor_id}_low`;\r\n+            \r\n+            // Only create alert if we don't already have an active one for this condition\r\n+            if (!this.activeAlerts[alertKey]) {\r\n+              console.log(`Creating low alert for ${sensor.sensor_type}: ${sensorValue} < ${config.min_value}`);\r\n+              const alert = await this.createAlert(sensor, 'Low', sensorValue, config.min_value);\r\n+              if (alert) {\r\n+                // Mark this condition as having an active alert\r\n+                this.activeAlerts[alertKey] = alert.alert_id;\r\n+              }\r\n+            } else {\r\n+              console.log(`Alert already active for ${sensor.sensor_type} low threshold`);\r\n+            }\r\n+          }\r\n+          // If value is back above threshold, clear the active alert marker\r\n+          else if (sensorValue >= config.min_value) {\r\n+            const alertKey = `${sensor.sensor_id}_low`;\r\n+            if (this.activeAlerts[alertKey]) {\r\n+              console.log(`Clearing active low alert marker for ${sensor.sensor_type}`);\r\n+              delete this.activeAlerts[alertKey];\r\n+            }\r\n+          }\r\n         }\r\n+        \r\n+        // Store the current value for next check\r\n+        this.lastCheckedValues[sensorKey] = sensorValue;\r\n       }\r\n+      \r\n+      // Optionally check for resolved alerts\r\n+      await this.checkForResolvedAlerts();\r\n+      \r\n     } catch (error) {\r\n       logger.error(`Error in checkThresholds: ${error.message}`);\r\n       throw error;\r\n     }\r\n   }\r\n-\r\n-  async getAllActiveConfigs() {\r\n+  \r\n+  // Optional: add this method to automatically resolve alerts when conditions return to normal\r\n+  async checkForResolvedAlerts() {\r\n     try {\r\n+      // Get all pending alerts\r\n       const query = `\r\n-        SELECT config_id, user_id, sensor_type, min_value, max_value, is_active\r\n-        FROM alert_config\r\n-        WHERE is_active = true\r\n+        SELECT a.alert_id, a.sensor_id, a.alert_type\r\n+        FROM alert a\r\n+        WHERE a.status = 'pending'\r\n       `;\r\n       \r\n       const result = await db.query(query);\r\n-      return result.rows;\r\n-    } catch (error) {\r\n-      logger.error(`Error getting active alert configurations: ${error.message}`);\r\n-      return [];\r\n-    }\r\n-  }\r\n-\r\n-  async createAlert(sensor, levelType, currentValue, thresholdValue) {\r\n-    try {\r\n-      const alertType = `${levelType} ${sensor.sensor_type}`;\r\n-      const message = `${sensor.sensor_type} is ${levelType.toLowerCase()} at ${currentValue.toFixed(1)}${sensor.unit || ''} (threshold: ${thresholdValue}${sensor.unit || ''})`;\r\n       \r\n-      logger.info(`Creating alert: ${message}`);\r\n-      \r\n-      // Find a device associated with this sensor (if any)\r\n-      let deviceId = null;\r\n-      try {\r\n-        const deviceQuery = `\r\n-          SELECT device_id FROM equipped_with \r\n-          WHERE sensor_id = $1 \r\n-          LIMIT 1\r\n-        `;\r\n-        const deviceResult = await db.query(deviceQuery, [sensor.sensor_id]);\r\n-        if (deviceResult.rows.length > 0) {\r\n-          deviceId = deviceResult.rows[0].device_id;\r\n+      for (const alert of result.rows) {\r\n+        // Extract if this is a high or low alert\r\n+        const isHighAlert = alert.alert_type.toLowerCase().includes('high');\r\n+        const alertKey = `${alert.sensor_id}_${isHighAlert ? 'high' : 'low'}`;\r\n+        \r\n+        // If alert is in DB but not in our active alerts map, mark it as resolved\r\n+        if (!this.activeAlerts[alertKey]) {\r\n+          logger.info(`Auto-resolving alert ID ${alert.alert_id} as condition is no longer active`);\r\n+          \r\n+          const updateQuery = `\r\n+            UPDATE alert\r\n+            SET status = 'resolved'\r\n+            WHERE alert_id = $1\r\n+          `;\r\n+          \r\n+          await db.query(updateQuery, [alert.alert_id]);\r\n         }\r\n-      } catch (err) {\r\n-        logger.warn(`Could not find device for sensor ${sensor.sensor_id}: ${err.message}`);\r\n       }\r\n-      \r\n-      // Create the alert\r\n-      const query = `\r\n-        INSERT INTO alert (device_id, sensor_id, alert_type, amessage, status)\r\n-        VALUES ($1, $2, $3, $4, $5)\r\n-        RETURNING *\r\n-      `;\r\n-      \r\n-      const values = [\r\n-        deviceId,\r\n-        sensor.sensor_id,\r\n-        alertType,\r\n-        message,\r\n-        'pending'\r\n-      ];\r\n-      \r\n-      const result = await db.query(query, values);\r\n-      logger.info(`Alert created with ID: ${result.rows[0].alert_id}`);\r\n-      \r\n-      return result.rows[0];\r\n     } catch (error) {\r\n-      logger.error(`Error creating alert: ${error.message}`);\r\n+      logger.error(`Error checking for resolved alerts: ${error.message}`);\r\n     }\r\n   }\r\n+\r\n+  // other methods remain the same...\r\n }\r\n \r\n module.exports = new AlertMonitorService();\n\\ No newline at end of file\n"
                },
                {
                    "date": 1746469907073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-// In your alertMonitorService.js\r\n \r\n class AlertMonitorService {\r\n   constructor() {\r\n     this.isRunning = false;\r\n"
                },
                {
                    "date": 1746469925151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,9 @@\n+const SensorModel = require('../models/sensorModel');\r\n+const AlertConfigModel = require('../models/alertConfigModel');\r\n+const AlertModel = require('../models/alertModel');\r\n+const db = require('../config/db');\r\n+const logger = require('../utils/logger');\r\n \r\n class AlertMonitorService {\r\n   constructor() {\r\n     this.isRunning = false;\r\n@@ -6,10 +11,35 @@\n     this.lastCheckedValues = {}; // Store previous values\r\n     this.activeAlerts = {}; // Track currently active alerts by sensor type and condition\r\n   }\r\n \r\n-  // ... other methods remain the same ...\r\n+  start() {\r\n+    if (this.isRunning) {\r\n+      logger.info('Alert monitor service is already running');\r\n+      return;\r\n+    }\r\n \r\n+    // Check for alerts every minute\r\n+    this.job = setInterval(async () => {\r\n+      try {\r\n+        await this.checkThresholds();\r\n+      } catch (error) {\r\n+        logger.error(`Error checking alert thresholds: ${error.message}`);\r\n+      }\r\n+    }, 60000); // 60000ms = 1 minute\r\n+\r\n+    this.isRunning = true;\r\n+    logger.info('Alert monitor service started successfully');\r\n+  }\r\n+\r\n+  stop() {\r\n+    if (this.job) {\r\n+      clearInterval(this.job);\r\n+      this.isRunning = false;\r\n+      logger.info('Alert monitor service stopped');\r\n+    }\r\n+  }\r\n+\r\n   async checkThresholds() {\r\n     logger.info('Checking sensor values against alert thresholds');\r\n \r\n     try {\r\n@@ -99,18 +129,17 @@\n         // Store the current value for next check\r\n         this.lastCheckedValues[sensorKey] = sensorValue;\r\n       }\r\n       \r\n-      // Optionally check for resolved alerts\r\n+      // Check for resolved alerts\r\n       await this.checkForResolvedAlerts();\r\n       \r\n     } catch (error) {\r\n       logger.error(`Error in checkThresholds: ${error.message}`);\r\n       throw error;\r\n     }\r\n   }\r\n   \r\n-  // Optional: add this method to automatically resolve alerts when conditions return to normal\r\n   async checkForResolvedAlerts() {\r\n     try {\r\n       // Get all pending alerts\r\n       const query = `\r\n@@ -143,8 +172,70 @@\n       logger.error(`Error checking for resolved alerts: ${error.message}`);\r\n     }\r\n   }\r\n \r\n-  // other methods remain the same...\r\n+  async getAllActiveConfigs() {\r\n+    try {\r\n+      const query = `\r\n+        SELECT config_id, user_id, sensor_type, min_value, max_value, is_active\r\n+        FROM alert_config\r\n+        WHERE is_active = true\r\n+      `;\r\n+      \r\n+      const result = await db.query(query);\r\n+      return result.rows;\r\n+    } catch (error) {\r\n+      logger.error(`Error getting active alert configurations: ${error.message}`);\r\n+      return [];\r\n+    }\r\n+  }\r\n+\r\n+  async createAlert(sensor, levelType, currentValue, thresholdValue) {\r\n+    try {\r\n+      const alertType = `${levelType} ${sensor.sensor_type}`;\r\n+      const message = `${sensor.sensor_type} is ${levelType.toLowerCase()} at ${currentValue.toFixed(1)}${sensor.unit || ''} (threshold: ${thresholdValue}${sensor.unit || ''})`;\r\n+      \r\n+      logger.info(`Creating alert: ${message}`);\r\n+      \r\n+      // Find a device associated with this sensor (if any)\r\n+      let deviceId = null;\r\n+      try {\r\n+        const deviceQuery = `\r\n+          SELECT device_id FROM equipped_with \r\n+          WHERE sensor_id = $1 \r\n+          LIMIT 1\r\n+        `;\r\n+        const deviceResult = await db.query(deviceQuery, [sensor.sensor_id]);\r\n+        if (deviceResult.rows.length > 0) {\r\n+          deviceId = deviceResult.rows[0].device_id;\r\n+        }\r\n+      } catch (err) {\r\n+        logger.warn(`Could not find device for sensor ${sensor.sensor_id}: ${err.message}`);\r\n+      }\r\n+      \r\n+      // Create the alert\r\n+      const query = `\r\n+        INSERT INTO alert (device_id, sensor_id, alert_type, amessage, status)\r\n+        VALUES ($1, $2, $3, $4, $5)\r\n+        RETURNING *\r\n+      `;\r\n+      \r\n+      const values = [\r\n+        deviceId,\r\n+        sensor.sensor_id,\r\n+        alertType,\r\n+        message,\r\n+        'pending'\r\n+      ];\r\n+      \r\n+      const result = await db.query(query, values);\r\n+      logger.info(`Alert created with ID: ${result.rows[0].alert_id}`);\r\n+      \r\n+      return result.rows[0];\r\n+    } catch (error) {\r\n+      logger.error(`Error creating alert: ${error.message}`);\r\n+      return null;\r\n+    }\r\n+  }\r\n }\r\n \r\n module.exports = new AlertMonitorService();\n\\ No newline at end of file\n"
                },
                {
                    "date": 1746470213167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,114 +14,160 @@\n \r\n   start() {\r\n     if (this.isRunning) {\r\n       logger.info('Alert monitor service is already running');\r\n-      return;\r\n+      return false;\r\n     }\r\n \r\n+    // Clear any existing interval first\r\n+    if (this.job) {\r\n+      clearInterval(this.job);\r\n+      this.job = null;\r\n+    }\r\n+\r\n     // Check for alerts every minute\r\n     this.job = setInterval(async () => {\r\n       try {\r\n+        console.log(`[${new Date().toLocaleTimeString()}] Đang chạy kiểm tra cảnh báo định kỳ...`);\r\n         await this.checkThresholds();\r\n+        console.log(`[${new Date().toLocaleTimeString()}] Kiểm tra cảnh báo hoàn tất`);\r\n       } catch (error) {\r\n         logger.error(`Error checking alert thresholds: ${error.message}`);\r\n       }\r\n     }, 60000); // 60000ms = 1 minute\r\n \r\n     this.isRunning = true;\r\n     logger.info('Alert monitor service started successfully');\r\n+    return true;\r\n   }\r\n \r\n   stop() {\r\n     if (this.job) {\r\n       clearInterval(this.job);\r\n+      this.job = null;\r\n       this.isRunning = false;\r\n       logger.info('Alert monitor service stopped');\r\n     }\r\n   }\r\n \r\n   async checkThresholds() {\r\n     logger.info('Checking sensor values against alert thresholds');\r\n+    console.log('========== ALERT CHECK STARTED ==========');\r\n+    console.log('Checking sensor values against alert thresholds at', new Date().toISOString());\r\n \r\n     try {\r\n       // Get all active alert configurations\r\n       const allConfigs = await this.getAllActiveConfigs();\r\n       if (!allConfigs || allConfigs.length === 0) {\r\n         logger.info('No active alert configurations found');\r\n+        console.log('No active alert configurations found');\r\n+        console.log('========== ALERT CHECK COMPLETED (NO CONFIGS) ==========');\r\n         return;\r\n       }\r\n \r\n+      console.log(`Found ${allConfigs.length} active alert configurations`);\r\n+      allConfigs.forEach(config => {\r\n+        console.log(`Config: type=${config.sensor_type}, min=${config.min_value}, max=${config.max_value}, active=${config.is_active}`);\r\n+      });\r\n+\r\n       // Get all sensors\r\n       const sensors = await SensorModel.getAllSensors();\r\n+      console.log(`Found ${sensors.length} sensors to check`);\r\n       \r\n+      // Debug log all sensors\r\n+      sensors.forEach(sensor => {\r\n+        console.log(`Sensor: id=${sensor.sensor_id}, type=${sensor.sensor_type}`);\r\n+      });\r\n+      \r\n       // Check each sensor\r\n       for (const sensor of sensors) {\r\n+        console.log(`Checking sensor ${sensor.sensor_id} (${sensor.sensor_type})...`);\r\n+        \r\n         // Get configs for this sensor type\r\n         const configs = allConfigs.filter(config => \r\n           config.sensor_type.toLowerCase() === sensor.sensor_type.toLowerCase()\r\n         );\r\n         \r\n         if (configs.length === 0) {\r\n+          console.log(`No configurations found for ${sensor.sensor_type} - skipping`);\r\n           continue; // No configs for this sensor type\r\n         }\r\n \r\n+        console.log(`Found ${configs.length} configurations for ${sensor.sensor_type}`);\r\n+\r\n         // Get latest sensor reading\r\n         const latestData = await SensorModel.getLatestSensorData(sensor.sensor_id);\r\n         if (!latestData) {\r\n+          console.log(`No data found for sensor ${sensor.sensor_id} - skipping`);\r\n           continue;\r\n         }\r\n \r\n         const sensorValue = parseFloat(latestData.svalue);\r\n+        console.log(`Latest ${sensor.sensor_type} value: ${sensorValue}`);\r\n+        \r\n         const sensorKey = `${sensor.sensor_id}`;\r\n+        const previousValue = this.lastCheckedValues[sensorKey];\r\n+        this.lastCheckedValues[sensorKey] = sensorValue;\r\n         \r\n+        // Log if this is a new value\r\n+        if (previousValue !== undefined) {\r\n+          console.log(`Previous value was: ${previousValue}, changed: ${previousValue !== sensorValue}`);\r\n+        }\r\n+        \r\n         // Check against each config for this sensor type\r\n         for (const config of configs) {\r\n+          console.log(`Checking against config: min=${config.min_value}, max=${config.max_value}`);\r\n+          \r\n           // Check if value exceeds high threshold\r\n           if (sensorValue > config.max_value) {\r\n+            console.log(`HIGH THRESHOLD EXCEEDED: ${sensorValue} > ${config.max_value}`);\r\n             const alertKey = `${sensor.sensor_id}_high`;\r\n             \r\n             // Only create alert if we don't already have an active one for this condition\r\n             if (!this.activeAlerts[alertKey]) {\r\n-              console.log(`Creating high alert for ${sensor.sensor_type}: ${sensorValue} > ${config.max_value}`);\r\n+              console.log(`Creating HIGH alert for ${sensor.sensor_type}: ${sensorValue} > ${config.max_value}`);\r\n               const alert = await this.createAlert(sensor, 'High', sensorValue, config.max_value);\r\n               if (alert) {\r\n                 // Mark this condition as having an active alert\r\n                 this.activeAlerts[alertKey] = alert.alert_id;\r\n+                console.log(`Alert created with ID: ${alert.alert_id}`);\r\n               }\r\n             } else {\r\n-              console.log(`Alert already active for ${sensor.sensor_type} high threshold`);\r\n+              console.log(`Alert already active for ${sensor.sensor_type} HIGH threshold: ${this.activeAlerts[alertKey]}`);\r\n             }\r\n-          } \r\n-          // If value is back below threshold, clear the active alert marker\r\n-          else if (sensorValue <= config.max_value) {\r\n+          } else {\r\n+            console.log(`High threshold NOT exceeded: ${sensorValue} <= ${config.max_value}`);\r\n+            // Clear active high alert if value is back in range\r\n             const alertKey = `${sensor.sensor_id}_high`;\r\n             if (this.activeAlerts[alertKey]) {\r\n-              console.log(`Clearing active high alert marker for ${sensor.sensor_type}`);\r\n+              console.log(`Clearing active high alert marker: ${this.activeAlerts[alertKey]}`);\r\n               delete this.activeAlerts[alertKey];\r\n             }\r\n           }\r\n           \r\n           // Check if value is below low threshold\r\n           if (sensorValue < config.min_value) {\r\n+            console.log(`LOW THRESHOLD EXCEEDED: ${sensorValue} < ${config.min_value}`);\r\n             const alertKey = `${sensor.sensor_id}_low`;\r\n             \r\n             // Only create alert if we don't already have an active one for this condition\r\n             if (!this.activeAlerts[alertKey]) {\r\n-              console.log(`Creating low alert for ${sensor.sensor_type}: ${sensorValue} < ${config.min_value}`);\r\n+              console.log(`Creating LOW alert for ${sensor.sensor_type}: ${sensorValue} < ${config.min_value}`);\r\n               const alert = await this.createAlert(sensor, 'Low', sensorValue, config.min_value);\r\n               if (alert) {\r\n                 // Mark this condition as having an active alert\r\n                 this.activeAlerts[alertKey] = alert.alert_id;\r\n+                console.log(`Alert created with ID: ${alert.alert_id}`);\r\n               }\r\n             } else {\r\n-              console.log(`Alert already active for ${sensor.sensor_type} low threshold`);\r\n+              console.log(`Alert already active for ${sensor.sensor_type} LOW threshold: ${this.activeAlerts[alertKey]}`);\r\n             }\r\n-          }\r\n-          // If value is back above threshold, clear the active alert marker\r\n-          else if (sensorValue >= config.min_value) {\r\n+          } else {\r\n+            console.log(`Low threshold NOT exceeded: ${sensorValue} >= ${config.min_value}`);\r\n+            // Clear active low alert if value is back in range\r\n             const alertKey = `${sensor.sensor_id}_low`;\r\n             if (this.activeAlerts[alertKey]) {\r\n-              console.log(`Clearing active low alert marker for ${sensor.sensor_type}`);\r\n+              console.log(`Clearing active low alert marker: ${this.activeAlerts[alertKey]}`);\r\n               delete this.activeAlerts[alertKey];\r\n             }\r\n           }\r\n         }\r\n@@ -131,11 +177,15 @@\n       }\r\n       \r\n       // Check for resolved alerts\r\n       await this.checkForResolvedAlerts();\r\n+      console.log('========== ALERT CHECK COMPLETED ==========');\r\n       \r\n     } catch (error) {\r\n       logger.error(`Error in checkThresholds: ${error.message}`);\r\n+      console.error(`Error in checkThresholds: ${error.message}`);\r\n+      console.error(error.stack);\r\n+      console.log('========== ALERT CHECK FAILED ==========');\r\n       throw error;\r\n     }\r\n   }\r\n   \r\n@@ -148,8 +198,9 @@\n         WHERE a.status = 'pending'\r\n       `;\r\n       \r\n       const result = await db.query(query);\r\n+      console.log(`Checking ${result.rows.length} pending alerts for resolution`);\r\n       \r\n       for (const alert of result.rows) {\r\n         // Extract if this is a high or low alert\r\n         const isHighAlert = alert.alert_type.toLowerCase().includes('high');\r\n@@ -157,8 +208,9 @@\n         \r\n         // If alert is in DB but not in our active alerts map, mark it as resolved\r\n         if (!this.activeAlerts[alertKey]) {\r\n           logger.info(`Auto-resolving alert ID ${alert.alert_id} as condition is no longer active`);\r\n+          console.log(`Auto-resolving alert ID ${alert.alert_id} as condition is no longer active`);\r\n           \r\n           const updateQuery = `\r\n             UPDATE alert\r\n             SET status = 'resolved'\r\n@@ -169,8 +221,9 @@\n         }\r\n       }\r\n     } catch (error) {\r\n       logger.error(`Error checking for resolved alerts: ${error.message}`);\r\n+      console.error(`Error checking for resolved alerts: ${error.message}`);\r\n     }\r\n   }\r\n \r\n   async getAllActiveConfigs() {\r\n@@ -235,7 +288,81 @@\n       logger.error(`Error creating alert: ${error.message}`);\r\n       return null;\r\n     }\r\n   }\r\n+  \r\n+  async testHumidityAlert(humidityValue) {\r\n+    try {\r\n+      console.log(`========== TESTING HUMIDITY ALERT: ${humidityValue} ==========`);\r\n+      \r\n+      // Get humidity sensor\r\n+      const sensors = await SensorModel.getAllSensors();\r\n+      const humiditySensor = sensors.find(s => s.sensor_type.toLowerCase() === 'humidity');\r\n+      \r\n+      if (!humiditySensor) {\r\n+        console.error('No humidity sensor found');\r\n+        return { success: false, message: 'No humidity sensor found' };\r\n+      }\r\n+      \r\n+      console.log(`Found humidity sensor with ID: ${humiditySensor.sensor_id}`);\r\n+      \r\n+      // Get humidity configurations\r\n+      const allConfigs = await this.getAllActiveConfigs();\r\n+      const humidityConfigs = allConfigs.filter(config => \r\n+        config.sensor_type.toLowerCase() === 'humidity'\r\n+      );\r\n+      \r\n+      if (humidityConfigs.length === 0) {\r\n+        console.error('No humidity configurations found');\r\n+        return { success: false, message: 'No humidity configurations found' };\r\n+      }\r\n+      \r\n+      console.log(`Found ${humidityConfigs.length} humidity configurations`);\r\n+      \r\n+      // Force create a humidity alert\r\n+      for (const config of humidityConfigs) {\r\n+        console.log(`Testing against config: min=${config.min_value}, max=${config.max_value}`);\r\n+        \r\n+        let alertType, thresholdValue;\r\n+        let shouldAlert = false;\r\n+        \r\n+        // Check if value exceeds thresholds\r\n+        if (humidityValue > config.max_value) {\r\n+          alertType = 'High';\r\n+          thresholdValue = config.max_value;\r\n+          shouldAlert = true;\r\n+          console.log(`HIGH threshold exceeded: ${humidityValue} > ${config.max_value}`);\r\n+        } else if (humidityValue < config.min_value) {\r\n+          alertType = 'Low';\r\n+          thresholdValue = config.min_value;\r\n+          shouldAlert = true;\r\n+          console.log(`LOW threshold exceeded: ${humidityValue} < ${config.min_value}`);\r\n+        } else {\r\n+          console.log(`No thresholds exceeded: ${config.min_value} <= ${humidityValue} <= ${config.max_value}`);\r\n+        }\r\n+        \r\n+        if (shouldAlert) {\r\n+          console.log(`Creating test ${alertType} humidity alert for value: ${humidityValue}`);\r\n+          const alert = await this.createAlert(humiditySensor, alertType, humidityValue, thresholdValue);\r\n+          \r\n+          return { \r\n+            success: true, \r\n+            alertCreated: true, \r\n+            alertId: alert.alert_id,\r\n+            message: `Created ${alertType} humidity alert for value: ${humidityValue}`\r\n+          };\r\n+        }\r\n+      }\r\n+      \r\n+      return { \r\n+        success: true, \r\n+        alertCreated: false, \r\n+        message: 'No thresholds exceeded, no alert created' \r\n+      };\r\n+    } catch (error) {\r\n+      console.error(`Error testing humidity alert: ${error.message}`);\r\n+      return { success: false, message: error.message };\r\n+    }\r\n+  }\r\n }\r\n \r\n module.exports = new AlertMonitorService();\n\\ No newline at end of file\n"
                },
                {
                    "date": 1746498555656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,10 @@\n     this.isRunning = false;\r\n     this.checkInterval = '*/1 * * * *'; // Check every minute\r\n     this.lastCheckedValues = {}; // Store previous values\r\n     this.activeAlerts = {}; // Track currently active alerts by sensor type and condition\r\n+    this.lastAlertedValues = {}; // Lưu giá trị khi cảnh báo được tạo cuối cùng\r\n+    this.lastAlertTimes = {}; // Lưu thời gian của cảnh báo cuối cùng\r\n   }\r\n \r\n   start() {\r\n     if (this.isRunning) {\r\n@@ -105,9 +107,8 @@\n         console.log(`Latest ${sensor.sensor_type} value: ${sensorValue}`);\r\n         \r\n         const sensorKey = `${sensor.sensor_id}`;\r\n         const previousValue = this.lastCheckedValues[sensorKey];\r\n-        this.lastCheckedValues[sensorKey] = sensorValue;\r\n         \r\n         // Log if this is a new value\r\n         if (previousValue !== undefined) {\r\n           console.log(`Previous value was: ${previousValue}, changed: ${previousValue !== sensorValue}`);\r\n@@ -121,19 +122,35 @@\n           if (sensorValue > config.max_value) {\r\n             console.log(`HIGH THRESHOLD EXCEEDED: ${sensorValue} > ${config.max_value}`);\r\n             const alertKey = `${sensor.sensor_id}_high`;\r\n             \r\n-            // Only create alert if we don't already have an active one for this condition\r\n-            if (!this.activeAlerts[alertKey]) {\r\n+            // Xác định xem có nên tạo cảnh báo mới hay không\r\n+            const lastAlertedValue = this.lastAlertedValues[alertKey];\r\n+            const lastAlertTime = this.lastAlertTimes[alertKey] || 0;\r\n+            const currentTime = Date.now();\r\n+            \r\n+            // Tạo cảnh báo mới nếu:\r\n+            // 1. Chưa có cảnh báo nào cho điều kiện này trước đây\r\n+            // 2. Hoặc giá trị đã thay đổi ít nhất 1 đơn vị so với lần cảnh báo trước\r\n+            // 3. Hoặc đã qua ít nhất 1 giờ kể từ lần cảnh báo trước\r\n+            const valueChanged = !lastAlertedValue || Math.abs(sensorValue - lastAlertedValue) >= 1.0;\r\n+            const timeElapsed = (currentTime - lastAlertTime) >= 3600000; // 1 giờ = 3600000ms\r\n+            \r\n+            if (!this.activeAlerts[alertKey] || valueChanged || timeElapsed) {\r\n               console.log(`Creating HIGH alert for ${sensor.sensor_type}: ${sensorValue} > ${config.max_value}`);\r\n+              console.log(`Reason: ${!this.activeAlerts[alertKey] ? 'No active alert' : valueChanged ? 'Value changed significantly' : 'Time elapsed'}`);\r\n+              \r\n               const alert = await this.createAlert(sensor, 'High', sensorValue, config.max_value);\r\n               if (alert) {\r\n-                // Mark this condition as having an active alert\r\n+                // Cập nhật thông tin theo dõi\r\n                 this.activeAlerts[alertKey] = alert.alert_id;\r\n+                this.lastAlertedValues[alertKey] = sensorValue;\r\n+                this.lastAlertTimes[alertKey] = currentTime;\r\n                 console.log(`Alert created with ID: ${alert.alert_id}`);\r\n               }\r\n             } else {\r\n               console.log(`Alert already active for ${sensor.sensor_type} HIGH threshold: ${this.activeAlerts[alertKey]}`);\r\n+              console.log(`Last alerted value: ${lastAlertedValue}, current: ${sensorValue}, time since last alert: ${Math.floor((currentTime - lastAlertTime) / 60000)} minutes`);\r\n             }\r\n           } else {\r\n             console.log(`High threshold NOT exceeded: ${sensorValue} <= ${config.max_value}`);\r\n             // Clear active high alert if value is back in range\r\n@@ -148,19 +165,31 @@\n           if (sensorValue < config.min_value) {\r\n             console.log(`LOW THRESHOLD EXCEEDED: ${sensorValue} < ${config.min_value}`);\r\n             const alertKey = `${sensor.sensor_id}_low`;\r\n             \r\n-            // Only create alert if we don't already have an active one for this condition\r\n-            if (!this.activeAlerts[alertKey]) {\r\n+            // Xác định xem có nên tạo cảnh báo mới hay không - tương tự như trên\r\n+            const lastAlertedValue = this.lastAlertedValues[alertKey];\r\n+            const lastAlertTime = this.lastAlertTimes[alertKey] || 0;\r\n+            const currentTime = Date.now();\r\n+            \r\n+            const valueChanged = !lastAlertedValue || Math.abs(sensorValue - lastAlertedValue) >= 1.0;\r\n+            const timeElapsed = (currentTime - lastAlertTime) >= 3600000; // 1 giờ\r\n+            \r\n+            if (!this.activeAlerts[alertKey] || valueChanged || timeElapsed) {\r\n               console.log(`Creating LOW alert for ${sensor.sensor_type}: ${sensorValue} < ${config.min_value}`);\r\n+              console.log(`Reason: ${!this.activeAlerts[alertKey] ? 'No active alert' : valueChanged ? 'Value changed significantly' : 'Time elapsed'}`);\r\n+              \r\n               const alert = await this.createAlert(sensor, 'Low', sensorValue, config.min_value);\r\n               if (alert) {\r\n-                // Mark this condition as having an active alert\r\n+                // Cập nhật thông tin theo dõi\r\n                 this.activeAlerts[alertKey] = alert.alert_id;\r\n+                this.lastAlertedValues[alertKey] = sensorValue;\r\n+                this.lastAlertTimes[alertKey] = currentTime;\r\n                 console.log(`Alert created with ID: ${alert.alert_id}`);\r\n               }\r\n             } else {\r\n               console.log(`Alert already active for ${sensor.sensor_type} LOW threshold: ${this.activeAlerts[alertKey]}`);\r\n+              console.log(`Last alerted value: ${lastAlertedValue}, current: ${sensorValue}, time since last alert: ${Math.floor((currentTime - lastAlertTime) / 60000)} minutes`);\r\n             }\r\n           } else {\r\n             console.log(`Low threshold NOT exceeded: ${sensorValue} >= ${config.min_value}`);\r\n             // Clear active low alert if value is back in range\r\n@@ -217,8 +246,12 @@\n             WHERE alert_id = $1\r\n           `;\r\n           \r\n           await db.query(updateQuery, [alert.alert_id]);\r\n+          \r\n+          // Xóa các biến theo dõi cảnh báo này\r\n+          delete this.lastAlertedValues[alertKey];\r\n+          delete this.lastAlertTimes[alertKey];\r\n         }\r\n       }\r\n     } catch (error) {\r\n       logger.error(`Error checking for resolved alerts: ${error.message}`);\r\n"
                },
                {
                    "date": 1746498823710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,257 +8,90 @@\n   constructor() {\r\n     this.isRunning = false;\r\n     this.checkInterval = '*/1 * * * *'; // Check every minute\r\n     this.lastCheckedValues = {}; // Store previous values\r\n-    this.activeAlerts = {}; // Track currently active alerts by sensor type and condition\r\n-    this.lastAlertedValues = {}; // Lưu giá trị khi cảnh báo được tạo cuối cùng\r\n-    this.lastAlertTimes = {}; // Lưu thời gian của cảnh báo cuối cùng\r\n   }\r\n \r\n   start() {\r\n     if (this.isRunning) {\r\n       logger.info('Alert monitor service is already running');\r\n-      return false;\r\n+      return;\r\n     }\r\n \r\n-    // Clear any existing interval first\r\n-    if (this.job) {\r\n-      clearInterval(this.job);\r\n-      this.job = null;\r\n-    }\r\n-\r\n     // Check for alerts every minute\r\n     this.job = setInterval(async () => {\r\n       try {\r\n-        console.log(`[${new Date().toLocaleTimeString()}] Đang chạy kiểm tra cảnh báo định kỳ...`);\r\n         await this.checkThresholds();\r\n-        console.log(`[${new Date().toLocaleTimeString()}] Kiểm tra cảnh báo hoàn tất`);\r\n       } catch (error) {\r\n         logger.error(`Error checking alert thresholds: ${error.message}`);\r\n       }\r\n     }, 60000); // 60000ms = 1 minute\r\n \r\n     this.isRunning = true;\r\n     logger.info('Alert monitor service started successfully');\r\n-    return true;\r\n   }\r\n \r\n   stop() {\r\n     if (this.job) {\r\n       clearInterval(this.job);\r\n-      this.job = null;\r\n       this.isRunning = false;\r\n       logger.info('Alert monitor service stopped');\r\n     }\r\n   }\r\n \r\n   async checkThresholds() {\r\n     logger.info('Checking sensor values against alert thresholds');\r\n-    console.log('========== ALERT CHECK STARTED ==========');\r\n-    console.log('Checking sensor values against alert thresholds at', new Date().toISOString());\r\n \r\n     try {\r\n       // Get all active alert configurations\r\n       const allConfigs = await this.getAllActiveConfigs();\r\n       if (!allConfigs || allConfigs.length === 0) {\r\n         logger.info('No active alert configurations found');\r\n-        console.log('No active alert configurations found');\r\n-        console.log('========== ALERT CHECK COMPLETED (NO CONFIGS) ==========');\r\n         return;\r\n       }\r\n \r\n-      console.log(`Found ${allConfigs.length} active alert configurations`);\r\n-      allConfigs.forEach(config => {\r\n-        console.log(`Config: type=${config.sensor_type}, min=${config.min_value}, max=${config.max_value}, active=${config.is_active}`);\r\n-      });\r\n-\r\n       // Get all sensors\r\n       const sensors = await SensorModel.getAllSensors();\r\n-      console.log(`Found ${sensors.length} sensors to check`);\r\n       \r\n-      // Debug log all sensors\r\n-      sensors.forEach(sensor => {\r\n-        console.log(`Sensor: id=${sensor.sensor_id}, type=${sensor.sensor_type}`);\r\n-      });\r\n-      \r\n       // Check each sensor\r\n       for (const sensor of sensors) {\r\n-        console.log(`Checking sensor ${sensor.sensor_id} (${sensor.sensor_type})...`);\r\n-        \r\n         // Get configs for this sensor type\r\n         const configs = allConfigs.filter(config => \r\n           config.sensor_type.toLowerCase() === sensor.sensor_type.toLowerCase()\r\n         );\r\n         \r\n         if (configs.length === 0) {\r\n-          console.log(`No configurations found for ${sensor.sensor_type} - skipping`);\r\n           continue; // No configs for this sensor type\r\n         }\r\n \r\n-        console.log(`Found ${configs.length} configurations for ${sensor.sensor_type}`);\r\n-\r\n         // Get latest sensor reading\r\n         const latestData = await SensorModel.getLatestSensorData(sensor.sensor_id);\r\n         if (!latestData) {\r\n-          console.log(`No data found for sensor ${sensor.sensor_id} - skipping`);\r\n           continue;\r\n         }\r\n \r\n         const sensorValue = parseFloat(latestData.svalue);\r\n-        console.log(`Latest ${sensor.sensor_type} value: ${sensorValue}`);\r\n+        console.log(`Checking ${sensor.sensor_type}: Current value: ${sensorValue}`);\r\n         \r\n-        const sensorKey = `${sensor.sensor_id}`;\r\n-        const previousValue = this.lastCheckedValues[sensorKey];\r\n-        \r\n-        // Log if this is a new value\r\n-        if (previousValue !== undefined) {\r\n-          console.log(`Previous value was: ${previousValue}, changed: ${previousValue !== sensorValue}`);\r\n-        }\r\n-        \r\n         // Check against each config for this sensor type\r\n         for (const config of configs) {\r\n-          console.log(`Checking against config: min=${config.min_value}, max=${config.max_value}`);\r\n+          console.log(`Checking against threshold: min=${config.min_value}, max=${config.max_value}`);\r\n           \r\n-          // Check if value exceeds high threshold\r\n+          // Check if value exceeds threshold\r\n           if (sensorValue > config.max_value) {\r\n-            console.log(`HIGH THRESHOLD EXCEEDED: ${sensorValue} > ${config.max_value}`);\r\n-            const alertKey = `${sensor.sensor_id}_high`;\r\n-            \r\n-            // Xác định xem có nên tạo cảnh báo mới hay không\r\n-            const lastAlertedValue = this.lastAlertedValues[alertKey];\r\n-            const lastAlertTime = this.lastAlertTimes[alertKey] || 0;\r\n-            const currentTime = Date.now();\r\n-            \r\n-            // Tạo cảnh báo mới nếu:\r\n-            // 1. Chưa có cảnh báo nào cho điều kiện này trước đây\r\n-            // 2. Hoặc giá trị đã thay đổi ít nhất 1 đơn vị so với lần cảnh báo trước\r\n-            // 3. Hoặc đã qua ít nhất 1 giờ kể từ lần cảnh báo trước\r\n-            const valueChanged = !lastAlertedValue || Math.abs(sensorValue - lastAlertedValue) >= 1.0;\r\n-            const timeElapsed = (currentTime - lastAlertTime) >= 3600000; // 1 giờ = 3600000ms\r\n-            \r\n-            if (!this.activeAlerts[alertKey] || valueChanged || timeElapsed) {\r\n-              console.log(`Creating HIGH alert for ${sensor.sensor_type}: ${sensorValue} > ${config.max_value}`);\r\n-              console.log(`Reason: ${!this.activeAlerts[alertKey] ? 'No active alert' : valueChanged ? 'Value changed significantly' : 'Time elapsed'}`);\r\n-              \r\n-              const alert = await this.createAlert(sensor, 'High', sensorValue, config.max_value);\r\n-              if (alert) {\r\n-                // Cập nhật thông tin theo dõi\r\n-                this.activeAlerts[alertKey] = alert.alert_id;\r\n-                this.lastAlertedValues[alertKey] = sensorValue;\r\n-                this.lastAlertTimes[alertKey] = currentTime;\r\n-                console.log(`Alert created with ID: ${alert.alert_id}`);\r\n-              }\r\n-            } else {\r\n-              console.log(`Alert already active for ${sensor.sensor_type} HIGH threshold: ${this.activeAlerts[alertKey]}`);\r\n-              console.log(`Last alerted value: ${lastAlertedValue}, current: ${sensorValue}, time since last alert: ${Math.floor((currentTime - lastAlertTime) / 60000)} minutes`);\r\n-            }\r\n-          } else {\r\n-            console.log(`High threshold NOT exceeded: ${sensorValue} <= ${config.max_value}`);\r\n-            // Clear active high alert if value is back in range\r\n-            const alertKey = `${sensor.sensor_id}_high`;\r\n-            if (this.activeAlerts[alertKey]) {\r\n-              console.log(`Clearing active high alert marker: ${this.activeAlerts[alertKey]}`);\r\n-              delete this.activeAlerts[alertKey];\r\n-            }\r\n+            console.log(`Alert threshold exceeded! ${sensorValue} > ${config.max_value}`);\r\n+            await this.createAlert(sensor, 'High', sensorValue, config.max_value);\r\n+          } else if (sensorValue < config.min_value) {\r\n+            console.log(`Alert threshold exceeded! ${sensorValue} < ${config.min_value}`);\r\n+            await this.createAlert(sensor, 'Low', sensorValue, config.min_value);\r\n           }\r\n-          \r\n-          // Check if value is below low threshold\r\n-          if (sensorValue < config.min_value) {\r\n-            console.log(`LOW THRESHOLD EXCEEDED: ${sensorValue} < ${config.min_value}`);\r\n-            const alertKey = `${sensor.sensor_id}_low`;\r\n-            \r\n-            // Xác định xem có nên tạo cảnh báo mới hay không - tương tự như trên\r\n-            const lastAlertedValue = this.lastAlertedValues[alertKey];\r\n-            const lastAlertTime = this.lastAlertTimes[alertKey] || 0;\r\n-            const currentTime = Date.now();\r\n-            \r\n-            const valueChanged = !lastAlertedValue || Math.abs(sensorValue - lastAlertedValue) >= 1.0;\r\n-            const timeElapsed = (currentTime - lastAlertTime) >= 3600000; // 1 giờ\r\n-            \r\n-            if (!this.activeAlerts[alertKey] || valueChanged || timeElapsed) {\r\n-              console.log(`Creating LOW alert for ${sensor.sensor_type}: ${sensorValue} < ${config.min_value}`);\r\n-              console.log(`Reason: ${!this.activeAlerts[alertKey] ? 'No active alert' : valueChanged ? 'Value changed significantly' : 'Time elapsed'}`);\r\n-              \r\n-              const alert = await this.createAlert(sensor, 'Low', sensorValue, config.min_value);\r\n-              if (alert) {\r\n-                // Cập nhật thông tin theo dõi\r\n-                this.activeAlerts[alertKey] = alert.alert_id;\r\n-                this.lastAlertedValues[alertKey] = sensorValue;\r\n-                this.lastAlertTimes[alertKey] = currentTime;\r\n-                console.log(`Alert created with ID: ${alert.alert_id}`);\r\n-              }\r\n-            } else {\r\n-              console.log(`Alert already active for ${sensor.sensor_type} LOW threshold: ${this.activeAlerts[alertKey]}`);\r\n-              console.log(`Last alerted value: ${lastAlertedValue}, current: ${sensorValue}, time since last alert: ${Math.floor((currentTime - lastAlertTime) / 60000)} minutes`);\r\n-            }\r\n-          } else {\r\n-            console.log(`Low threshold NOT exceeded: ${sensorValue} >= ${config.min_value}`);\r\n-            // Clear active low alert if value is back in range\r\n-            const alertKey = `${sensor.sensor_id}_low`;\r\n-            if (this.activeAlerts[alertKey]) {\r\n-              console.log(`Clearing active low alert marker: ${this.activeAlerts[alertKey]}`);\r\n-              delete this.activeAlerts[alertKey];\r\n-            }\r\n-          }\r\n         }\r\n-        \r\n-        // Store the current value for next check\r\n-        this.lastCheckedValues[sensorKey] = sensorValue;\r\n       }\r\n-      \r\n-      // Check for resolved alerts\r\n-      await this.checkForResolvedAlerts();\r\n-      console.log('========== ALERT CHECK COMPLETED ==========');\r\n-      \r\n     } catch (error) {\r\n       logger.error(`Error in checkThresholds: ${error.message}`);\r\n-      console.error(`Error in checkThresholds: ${error.message}`);\r\n-      console.error(error.stack);\r\n-      console.log('========== ALERT CHECK FAILED ==========');\r\n       throw error;\r\n     }\r\n   }\r\n-  \r\n-  async checkForResolvedAlerts() {\r\n-    try {\r\n-      // Get all pending alerts\r\n-      const query = `\r\n-        SELECT a.alert_id, a.sensor_id, a.alert_type\r\n-        FROM alert a\r\n-        WHERE a.status = 'pending'\r\n-      `;\r\n-      \r\n-      const result = await db.query(query);\r\n-      console.log(`Checking ${result.rows.length} pending alerts for resolution`);\r\n-      \r\n-      for (const alert of result.rows) {\r\n-        // Extract if this is a high or low alert\r\n-        const isHighAlert = alert.alert_type.toLowerCase().includes('high');\r\n-        const alertKey = `${alert.sensor_id}_${isHighAlert ? 'high' : 'low'}`;\r\n-        \r\n-        // If alert is in DB but not in our active alerts map, mark it as resolved\r\n-        if (!this.activeAlerts[alertKey]) {\r\n-          logger.info(`Auto-resolving alert ID ${alert.alert_id} as condition is no longer active`);\r\n-          console.log(`Auto-resolving alert ID ${alert.alert_id} as condition is no longer active`);\r\n-          \r\n-          const updateQuery = `\r\n-            UPDATE alert\r\n-            SET status = 'resolved'\r\n-            WHERE alert_id = $1\r\n-          `;\r\n-          \r\n-          await db.query(updateQuery, [alert.alert_id]);\r\n-          \r\n-          // Xóa các biến theo dõi cảnh báo này\r\n-          delete this.lastAlertedValues[alertKey];\r\n-          delete this.lastAlertTimes[alertKey];\r\n-        }\r\n-      }\r\n-    } catch (error) {\r\n-      logger.error(`Error checking for resolved alerts: ${error.message}`);\r\n-      console.error(`Error checking for resolved alerts: ${error.message}`);\r\n-    }\r\n-  }\r\n \r\n   async getAllActiveConfigs() {\r\n     try {\r\n       const query = `\r\n@@ -318,84 +151,9 @@\n       \r\n       return result.rows[0];\r\n     } catch (error) {\r\n       logger.error(`Error creating alert: ${error.message}`);\r\n-      return null;\r\n     }\r\n   }\r\n-  \r\n-  async testHumidityAlert(humidityValue) {\r\n-    try {\r\n-      console.log(`========== TESTING HUMIDITY ALERT: ${humidityValue} ==========`);\r\n-      \r\n-      // Get humidity sensor\r\n-      const sensors = await SensorModel.getAllSensors();\r\n-      const humiditySensor = sensors.find(s => s.sensor_type.toLowerCase() === 'humidity');\r\n-      \r\n-      if (!humiditySensor) {\r\n-        console.error('No humidity sensor found');\r\n-        return { success: false, message: 'No humidity sensor found' };\r\n-      }\r\n-      \r\n-      console.log(`Found humidity sensor with ID: ${humiditySensor.sensor_id}`);\r\n-      \r\n-      // Get humidity configurations\r\n-      const allConfigs = await this.getAllActiveConfigs();\r\n-      const humidityConfigs = allConfigs.filter(config => \r\n-        config.sensor_type.toLowerCase() === 'humidity'\r\n-      );\r\n-      \r\n-      if (humidityConfigs.length === 0) {\r\n-        console.error('No humidity configurations found');\r\n-        return { success: false, message: 'No humidity configurations found' };\r\n-      }\r\n-      \r\n-      console.log(`Found ${humidityConfigs.length} humidity configurations`);\r\n-      \r\n-      // Force create a humidity alert\r\n-      for (const config of humidityConfigs) {\r\n-        console.log(`Testing against config: min=${config.min_value}, max=${config.max_value}`);\r\n-        \r\n-        let alertType, thresholdValue;\r\n-        let shouldAlert = false;\r\n-        \r\n-        // Check if value exceeds thresholds\r\n-        if (humidityValue > config.max_value) {\r\n-          alertType = 'High';\r\n-          thresholdValue = config.max_value;\r\n-          shouldAlert = true;\r\n-          console.log(`HIGH threshold exceeded: ${humidityValue} > ${config.max_value}`);\r\n-        } else if (humidityValue < config.min_value) {\r\n-          alertType = 'Low';\r\n-          thresholdValue = config.min_value;\r\n-          shouldAlert = true;\r\n-          console.log(`LOW threshold exceeded: ${humidityValue} < ${config.min_value}`);\r\n-        } else {\r\n-          console.log(`No thresholds exceeded: ${config.min_value} <= ${humidityValue} <= ${config.max_value}`);\r\n-        }\r\n-        \r\n-        if (shouldAlert) {\r\n-          console.log(`Creating test ${alertType} humidity alert for value: ${humidityValue}`);\r\n-          const alert = await this.createAlert(humiditySensor, alertType, humidityValue, thresholdValue);\r\n-          \r\n-          return { \r\n-            success: true, \r\n-            alertCreated: true, \r\n-            alertId: alert.alert_id,\r\n-            message: `Created ${alertType} humidity alert for value: ${humidityValue}`\r\n-          };\r\n-        }\r\n-      }\r\n-      \r\n-      return { \r\n-        success: true, \r\n-        alertCreated: false, \r\n-        message: 'No thresholds exceeded, no alert created' \r\n-      };\r\n-    } catch (error) {\r\n-      console.error(`Error testing humidity alert: ${error.message}`);\r\n-      return { success: false, message: error.message };\r\n-    }\r\n-  }\r\n }\r\n \r\n module.exports = new AlertMonitorService();\n\\ No newline at end of file\n"
                }
            ],
            "date": 1746468995692,
            "name": "Commit-0",
            "content": "const SensorModel = require('../models/sensorModel');\r\nconst AlertConfigModel = require('../models/alertConfigModel');\r\nconst AlertModel = require('../models/alertModel');\r\nconst db = require('../config/db');\r\nconst logger = require('../utils/logger');\r\n\r\nclass AlertMonitorService {\r\n  constructor() {\r\n    this.isRunning = false;\r\n    this.checkInterval = '*/1 * * * *'; // Check every minute\r\n    this.lastCheckedValues = {}; // Store previous values\r\n    this.activeAlerts = {}; // Track currently active alerts by sensor type and condition\r\n  }\r\n\r\n  start() {\r\n    if (this.isRunning) {\r\n      logger.info('Alert monitor service is already running');\r\n      return false; // Trả về false nếu đã chạy\r\n    }\r\n  \r\n    // Check for alerts every minute\r\n    this.job = setInterval(async () => {\r\n      try {\r\n        console.log(`[${new Date().toLocaleTimeString()}] Đang chạy kiểm tra cảnh báo định kỳ...`);\r\n        await this.checkThresholds();\r\n        console.log(`[${new Date().toLocaleTimeString()}] Kiểm tra cảnh báo hoàn tất`);\r\n      } catch (error) {\r\n        logger.error(`Error checking alert thresholds: ${error.message}`);\r\n      }\r\n    }, 60000); // 60000ms = 1 minute\r\n  \r\n    this.isRunning = true;\r\n    logger.info('Alert monitor service started successfully');\r\n    return true; // Trả về true khi khởi động thành công\r\n  }\r\n\r\n  stop() {\r\n    if (this.job) {\r\n      clearInterval(this.job);\r\n      this.isRunning = false;\r\n      logger.info('Alert monitor service stopped');\r\n    }\r\n  }\r\n\r\n  async checkThresholds() {\r\n    logger.info('Checking sensor values against alert thresholds');\r\n\r\n    try {\r\n      // Get all active alert configurations\r\n      const allConfigs = await this.getAllActiveConfigs();\r\n      if (!allConfigs || allConfigs.length === 0) {\r\n        logger.info('No active alert configurations found');\r\n        return;\r\n      }\r\n\r\n      // Get all sensors\r\n      const sensors = await SensorModel.getAllSensors();\r\n      \r\n      // Check each sensor\r\n      for (const sensor of sensors) {\r\n        // Get configs for this sensor type\r\n        const configs = allConfigs.filter(config => \r\n          config.sensor_type.toLowerCase() === sensor.sensor_type.toLowerCase()\r\n        );\r\n        \r\n        if (configs.length === 0) {\r\n          continue; // No configs for this sensor type\r\n        }\r\n\r\n        // Get latest sensor reading\r\n        const latestData = await SensorModel.getLatestSensorData(sensor.sensor_id);\r\n        if (!latestData) {\r\n          continue;\r\n        }\r\n\r\n        const sensorValue = parseFloat(latestData.svalue);\r\n        const sensorKey = `${sensor.sensor_id}`;\r\n        \r\n        // Check against each config for this sensor type\r\n        for (const config of configs) {\r\n          // Check if value exceeds high threshold\r\n          if (sensorValue > config.max_value) {\r\n            const alertKey = `${sensor.sensor_id}_high`;\r\n            \r\n            // Only create alert if we don't already have an active one for this condition\r\n            if (!this.activeAlerts[alertKey]) {\r\n              console.log(`Creating high alert for ${sensor.sensor_type}: ${sensorValue} > ${config.max_value}`);\r\n              const alert = await this.createAlert(sensor, 'High', sensorValue, config.max_value);\r\n              if (alert) {\r\n                // Mark this condition as having an active alert\r\n                this.activeAlerts[alertKey] = alert.alert_id;\r\n              }\r\n            } else {\r\n              console.log(`Alert already active for ${sensor.sensor_type} high threshold`);\r\n            }\r\n          } \r\n          // If value is back below threshold, clear the active alert marker\r\n          else if (sensorValue <= config.max_value) {\r\n            const alertKey = `${sensor.sensor_id}_high`;\r\n            if (this.activeAlerts[alertKey]) {\r\n              console.log(`Clearing active high alert marker for ${sensor.sensor_type}`);\r\n              delete this.activeAlerts[alertKey];\r\n            }\r\n          }\r\n          \r\n          // Check if value is below low threshold\r\n          if (sensorValue < config.min_value) {\r\n            const alertKey = `${sensor.sensor_id}_low`;\r\n            \r\n            // Only create alert if we don't already have an active one for this condition\r\n            if (!this.activeAlerts[alertKey]) {\r\n              console.log(`Creating low alert for ${sensor.sensor_type}: ${sensorValue} < ${config.min_value}`);\r\n              const alert = await this.createAlert(sensor, 'Low', sensorValue, config.min_value);\r\n              if (alert) {\r\n                // Mark this condition as having an active alert\r\n                this.activeAlerts[alertKey] = alert.alert_id;\r\n              }\r\n            } else {\r\n              console.log(`Alert already active for ${sensor.sensor_type} low threshold`);\r\n            }\r\n          }\r\n          // If value is back above threshold, clear the active alert marker\r\n          else if (sensorValue >= config.min_value) {\r\n            const alertKey = `${sensor.sensor_id}_low`;\r\n            if (this.activeAlerts[alertKey]) {\r\n              console.log(`Clearing active low alert marker for ${sensor.sensor_type}`);\r\n              delete this.activeAlerts[alertKey];\r\n            }\r\n          }\r\n        }\r\n        \r\n        // Store the current value for next check\r\n        this.lastCheckedValues[sensorKey] = sensorValue;\r\n      }\r\n      \r\n      // Check for resolved alerts\r\n      await this.checkForResolvedAlerts();\r\n      \r\n    } catch (error) {\r\n      logger.error(`Error in checkThresholds: ${error.message}`);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  async checkForResolvedAlerts() {\r\n    try {\r\n      // Get all pending alerts\r\n      const query = `\r\n        SELECT a.alert_id, a.sensor_id, a.alert_type\r\n        FROM alert a\r\n        WHERE a.status = 'pending'\r\n      `;\r\n      \r\n      const result = await db.query(query);\r\n      \r\n      for (const alert of result.rows) {\r\n        // Extract if this is a high or low alert\r\n        const isHighAlert = alert.alert_type.toLowerCase().includes('high');\r\n        const alertKey = `${alert.sensor_id}_${isHighAlert ? 'high' : 'low'}`;\r\n        \r\n        // If alert is in DB but not in our active alerts map, mark it as resolved\r\n        if (!this.activeAlerts[alertKey]) {\r\n          logger.info(`Auto-resolving alert ID ${alert.alert_id} as condition is no longer active`);\r\n          \r\n          const updateQuery = `\r\n            UPDATE alert\r\n            SET status = 'resolved'\r\n            WHERE alert_id = $1\r\n          `;\r\n          \r\n          await db.query(updateQuery, [alert.alert_id]);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      logger.error(`Error checking for resolved alerts: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async getAllActiveConfigs() {\r\n    try {\r\n      const query = `\r\n        SELECT config_id, user_id, sensor_type, min_value, max_value, is_active\r\n        FROM alert_config\r\n        WHERE is_active = true\r\n      `;\r\n      \r\n      const result = await db.query(query);\r\n      return result.rows;\r\n    } catch (error) {\r\n      logger.error(`Error getting active alert configurations: ${error.message}`);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  async createAlert(sensor, levelType, currentValue, thresholdValue) {\r\n    try {\r\n      const alertType = `${levelType} ${sensor.sensor_type}`;\r\n      const message = `${sensor.sensor_type} is ${levelType.toLowerCase()} at ${currentValue.toFixed(1)}${sensor.unit || ''} (threshold: ${thresholdValue}${sensor.unit || ''})`;\r\n      \r\n      logger.info(`Creating alert: ${message}`);\r\n      \r\n      // Find a device associated with this sensor (if any)\r\n      let deviceId = null;\r\n      try {\r\n        const deviceQuery = `\r\n          SELECT device_id FROM equipped_with \r\n          WHERE sensor_id = $1 \r\n          LIMIT 1\r\n        `;\r\n        const deviceResult = await db.query(deviceQuery, [sensor.sensor_id]);\r\n        if (deviceResult.rows.length > 0) {\r\n          deviceId = deviceResult.rows[0].device_id;\r\n        }\r\n      } catch (err) {\r\n        logger.warn(`Could not find device for sensor ${sensor.sensor_id}: ${err.message}`);\r\n      }\r\n      \r\n      // Create the alert\r\n      const query = `\r\n        INSERT INTO alert (device_id, sensor_id, alert_type, amessage, status)\r\n        VALUES ($1, $2, $3, $4, $5)\r\n        RETURNING *\r\n      `;\r\n      \r\n      const values = [\r\n        deviceId,\r\n        sensor.sensor_id,\r\n        alertType,\r\n        message,\r\n        'pending'\r\n      ];\r\n      \r\n      const result = await db.query(query, values);\r\n      logger.info(`Alert created with ID: ${result.rows[0].alert_id}`);\r\n      \r\n      return result.rows[0];\r\n    } catch (error) {\r\n      logger.error(`Error creating alert: ${error.message}`);\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = new AlertMonitorService();"
        }
    ]
}