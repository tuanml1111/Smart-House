{
    "sourceFile": "backend/fix-humidity.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1746470451024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746470573271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,47 +1,161 @@\n-// fix-humidity.js\r\n-require('dotenv').config({ path: './config/.env' });\r\n-const SensorModel = require('./models/sensorModel');\r\n-const AlertModel = require('./models/alertModel');\r\n+const express = require('express');\r\n+const cors = require('cors');\r\n+const dotenv = require('dotenv');\r\n+const morgan = require('morgan');\r\n+const path = require('path');\r\n+const errorMiddleware = require('./middleware/errorMiddleware');\r\n+const mqttService = require('./services/mqttService');\r\n+const predictionRoutes = require('./routes/predictionRoutes');\r\n+const predictionService = require('./services/predictionService');\r\n \r\n-async function suaCanhBaoDoAm() {\r\n-  console.log('Đang chạy script sửa cảnh báo độ ẩm...');\r\n-  \r\n+// Load environment variables\r\n+dotenv.config({ path: './config/.env' });\r\n+\r\n+// Import routes\r\n+const authRoutes = require('./routes/authRoutes');\r\n+const deviceRoutes = require('./routes/deviceRoutes');\r\n+const sensorRoutes = require('./routes/sensorRoutes');\r\n+const alertRoutes = require('./routes/alertRoutes');\r\n+const alertConfigRoutes = require('./routes/alertConfigRoutes');\r\n+const alertMonitorService = require('./services/alertMonitorService');\r\n+\r\n+// Initialize express app\r\n+const app = express();\r\n+\r\n+// Middleware\r\n+app.use(cors({\r\n+  origin: ['http://localhost:3000', 'http://127.0.0.1:3000'],\r\n+  credentials: true,\r\n+  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\r\n+  allowedHeaders: ['Content-Type', 'Authorization']\r\n+}));\r\n+app.use(express.json());\r\n+app.use(express.urlencoded({ extended: true }));\r\n+app.use(morgan('dev'));\r\n+\r\n+// API routes\r\n+app.use('/api/auth', authRoutes);\r\n+app.use('/api/devices', deviceRoutes);\r\n+app.use('/api/sensors', sensorRoutes);\r\n+app.use('/api/alerts', alertRoutes);\r\n\\ No newline at end of file\n+app.use('/api/alert-config', alertConfigRoutes);\r\n+app.use('/api/predictions', predictionRoutes);\r\n+\r\n+// Test endpoint to manually trigger alert check\r\n+app.get('/api/test/check-alerts', async (req, res) => {\r\n   try {\r\n-    // Lấy cảm biến độ ẩm\r\n-    const sensors = await SensorModel.getAllSensors();\r\n-    const humiditySensor = sensors.find(s => s.sensor_type.toLowerCase() === 'humidity');\r\n+    console.log('Manual alert check triggered via API');\r\n+    await alertMonitorService.checkThresholds();\r\n+    res.status(200).json({ \r\n+      success: true, \r\n+      message: 'Alert check completed successfully' \r\n+    });\r\n+  } catch (error) {\r\n+    console.error('Error in manual alert check:', error);\r\n+    res.status(500).json({ \r\n+      success: false, \r\n+      message: 'Alert check failed: ' + error.message \r\n+    });\r\n+  }\r\n+});\r\n+\r\n+// Endpoint kiểm tra cảnh báo độ ẩm cụ thể\r\n+app.post('/api/test/humidity-alert', async (req, res) => {\r\n+  try {\r\n+    const { value } = req.body;\r\n     \r\n-    if (!humiditySensor) {\r\n-      console.error('Không tìm thấy cảm biến độ ẩm. Vui lòng tạo một cảm biến trước.');\r\n-      process.exit(1);\r\n+    if (value === undefined) {\r\n+      return res.status(400).json({ \r\n+        success: false, \r\n+        message: 'Vui lòng cung cấp giá trị độ ẩm' \r\n+      });\r\n     }\r\n     \r\n-    console.log(`Đã tìm thấy cảm biến độ ẩm với ID: ${humiditySensor.sensor_id}`);\r\n+    console.log(`Kiểm tra cảnh báo độ ẩm thủ công với giá trị: ${value}`);\r\n+    const result = await alertMonitorService.testHumidityAlert(parseFloat(value));\r\n+    res.status(200).json(result);\r\n+  } catch (error) {\r\n+    console.error('Lỗi kiểm tra cảnh báo độ ẩm:', error);\r\n+    res.status(500).json({ \r\n+      success: false, \r\n+      message: 'Kiểm tra cảnh báo độ ẩm thất bại: ' + error.message \r\n+    });\r\n+  }\r\n+});\r\n+\r\n+// Serve frontend in production\r\n+if (process.env.NODE_ENV === 'production') {\r\n+  app.use(express.static(path.join(__dirname, '../frontend/build')));\r\n+  \r\n+  app.get('*', (req, res) => {\r\n+    res.sendFile(path.join(__dirname, '../frontend/build', 'index.html'));\r\n+  });\r\n+}\r\n+\r\n+// Error handling middleware\r\n+app.use(errorMiddleware);\r\n+\r\n+// Set port\r\n+const PORT = process.env.PORT || 5000;\r\n+\r\n+// Start server\r\n+const server = app.listen(PORT, () => {\r\n+  console.log(`Server running on port ${PORT}`);\r\n+});\r\n+\r\n+// Khởi tạo các dịch vụ một cách tuần tự và đáng tin cậy\r\n+(async function khoiTaoDichVu() {\r\n+  try {\r\n+    // Kết nối MQTT broker trước\r\n+    console.log('Đang kết nối đến MQTT broker...');\r\n+    mqttService.connect();\r\n     \r\n-    // Chèn giá trị độ ẩm cao (90%)\r\n-    console.log('Đang chèn giá trị độ ẩm cao (90%)...');\r\n-    const highReading = await SensorModel.insertSensorData(humiditySensor.sensor_id, 90.0);\r\n-    console.log('Giá trị độ ẩm cao đã được chèn:', highReading);\r\n+    // Chờ một chút để kết nối thiết lập\r\n+    await new Promise(resolve => setTimeout(resolve, 1000));\r\n     \r\n-    // Tạo cảnh báo độ ẩm cao\r\n-    console.log('Đang tạo cảnh báo độ ẩm cao...');\r\n-    const alert = await AlertModel.createAlert({\r\n-      device_id: null,\r\n-      sensor_id: humiditySensor.sensor_id,\r\n-      alert_type: 'Độ ẩm cao',\r\n-      amessage: 'Độ ẩm cao ở mức 90.0% (ngưỡng: 70%)',\r\n-      status: 'pending'\r\n-    });\r\n+    // Bắt đầu dịch vụ giám sát cảnh báo\r\n+    console.log('Đang khởi động dịch vụ giám sát cảnh báo...');\r\n+    const alertStarted = alertMonitorService.start();\r\n+    if (alertStarted) {\r\n+      console.log('Dịch vụ giám sát cảnh báo khởi động thành công');\r\n+    } else {\r\n+      console.error('Không thể khởi động dịch vụ giám sát cảnh báo');\r\n+    }\r\n     \r\n-    console.log('Cảnh báo độ ẩm cao được tạo thành công:', alert);\r\n-    console.log('Vui lòng kiểm tra trang cảnh báo trong giao diện người dùng.');\r\n+    // Chạy kiểm tra cảnh báo ngay lập tức để nắm bắt trạng thái hiện tại\r\n+    console.log('Đang chạy kiểm tra cảnh báo ban đầu...');\r\n+    try {\r\n+      await alertMonitorService.checkThresholds();\r\n+      console.log('Kiểm tra cảnh báo ban đầu hoàn tất');\r\n+    } catch (checkError) {\r\n+      console.error('Lỗi trong kiểm tra cảnh báo ban đầu:', checkError);\r\n+    }\r\n     \r\n-    process.exit(0);\r\n+    // Khởi động dịch vụ dự đoán nhiệt độ sau cùng\r\n+    console.log('Đang khởi động dịch vụ dự đoán nhiệt độ...');\r\n+    predictionService.start(15); // Chạy dự đoán mỗi 15 phút\r\n+    console.log('Dịch vụ dự đoán nhiệt độ khởi động thành công');\r\n   } catch (error) {\r\n-    console.error('Lỗi trong script sửa cảnh báo độ ẩm:', error);\r\n-    process.exit(1);\r\n+    console.error('Lỗi trong quá trình khởi tạo dịch vụ:', error);\r\n+    console.error(error.stack);\r\n+    // Dịch vụ sẽ tiếp tục được thử mặc dù có lỗi\r\n   }\r\n-}\r\n+})();\r\n \r\n-// Chạy hàm\r\n-suaCanhBaoDoAm();\n+// Handle unhandled promise rejections - log error but don't exit process\r\n+process.on('unhandledRejection', (err) => {\r\n+  console.error(`Lỗi không xử lý: ${err.message}`);\r\n+  console.error(err.stack);\r\n+  // Không đóng server và thoát nữa - chỉ ghi log\r\n+});\r\n+\r\n+// Handle graceful shutdown\r\n+process.on('SIGTERM', async () => {\r\n+  console.log('SIGTERM received, shutting down gracefully');\r\n+  alertMonitorService.stop();\r\n+  mqttService.disconnect();\r\n+  server.close(() => {\r\n+    console.log('Process terminated');\r\n+    process.exit(0);\r\n+  });\r\n+});\n\\ No newline at end of file\n"
                }
            ],
            "date": 1746470451024,
            "name": "Commit-0",
            "content": "// fix-humidity.js\r\nrequire('dotenv').config({ path: './config/.env' });\r\nconst SensorModel = require('./models/sensorModel');\r\nconst AlertModel = require('./models/alertModel');\r\n\r\nasync function suaCanhBaoDoAm() {\r\n  console.log('Đang chạy script sửa cảnh báo độ ẩm...');\r\n  \r\n  try {\r\n    // Lấy cảm biến độ ẩm\r\n    const sensors = await SensorModel.getAllSensors();\r\n    const humiditySensor = sensors.find(s => s.sensor_type.toLowerCase() === 'humidity');\r\n    \r\n    if (!humiditySensor) {\r\n      console.error('Không tìm thấy cảm biến độ ẩm. Vui lòng tạo một cảm biến trước.');\r\n      process.exit(1);\r\n    }\r\n    \r\n    console.log(`Đã tìm thấy cảm biến độ ẩm với ID: ${humiditySensor.sensor_id}`);\r\n    \r\n    // Chèn giá trị độ ẩm cao (90%)\r\n    console.log('Đang chèn giá trị độ ẩm cao (90%)...');\r\n    const highReading = await SensorModel.insertSensorData(humiditySensor.sensor_id, 90.0);\r\n    console.log('Giá trị độ ẩm cao đã được chèn:', highReading);\r\n    \r\n    // Tạo cảnh báo độ ẩm cao\r\n    console.log('Đang tạo cảnh báo độ ẩm cao...');\r\n    const alert = await AlertModel.createAlert({\r\n      device_id: null,\r\n      sensor_id: humiditySensor.sensor_id,\r\n      alert_type: 'Độ ẩm cao',\r\n      amessage: 'Độ ẩm cao ở mức 90.0% (ngưỡng: 70%)',\r\n      status: 'pending'\r\n    });\r\n    \r\n    console.log('Cảnh báo độ ẩm cao được tạo thành công:', alert);\r\n    console.log('Vui lòng kiểm tra trang cảnh báo trong giao diện người dùng.');\r\n    \r\n    process.exit(0);\r\n  } catch (error) {\r\n    console.error('Lỗi trong script sửa cảnh báo độ ẩm:', error);\r\n    process.exit(1);\r\n  }\r\n}\r\n\r\n// Chạy hàm\r\nsuaCanhBaoDoAm();"
        }
    ]
}