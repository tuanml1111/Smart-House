{
    "sourceFile": "backend/controllers/predictionController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746511948087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746511948087,
            "name": "Commit-0",
            "content": "// backend/controllers/predictionController.js\r\nconst SensorModel = require('../models/sensorModel');\r\n\r\n// Lưu trữ dự đoán trong bộ nhớ cho đơn giản\r\n// (trong sản phẩm thực tế, bạn nên lưu vào cơ sở dữ liệu)\r\nconst predictions = [];\r\n\r\nexports.getPredictions = async (req, res, next) => {\r\n  try {\r\n    // Get the count parameter from query or default to 24\r\n    const count = parseInt(req.query.count) || 24;\r\n    \r\n    // Nếu không có dự đoán, tạo dữ liệu mẫu\r\n    if (predictions.length === 0) {\r\n      console.log('Không tìm thấy dữ liệu dự đoán. Tạo dữ liệu mẫu.');\r\n      await generateMockPredictions();\r\n    }\r\n    \r\n    // Trả về các dự đoán mới nhất\r\n    const latestPredictions = predictions.slice(-count);\r\n    \r\n    res.status(200).json({\r\n      success: true,\r\n      count: latestPredictions.length,\r\n      data: latestPredictions\r\n    });\r\n  } catch (error) {\r\n    console.error('Lỗi khi lấy dự đoán:', error);\r\n    next(error);\r\n  }\r\n};\r\n\r\n// Lưu dữ liệu dự đoán từ Python script\r\nexports.storePrediction = async (temperaturePrediction) => {\r\n  try {\r\n    console.log('Đang lưu dữ liệu dự đoán:', temperaturePrediction);\r\n    \r\n    // Lấy dữ liệu nhiệt độ thực tế mới nhất\r\n    const tempSensor = await SensorModel.getSensorByType('temperature');\r\n    let actualTemperature = null;\r\n    \r\n    if (tempSensor) {\r\n      const latestReading = await SensorModel.getLatestSensorData(tempSensor.sensor_id);\r\n      if (latestReading) {\r\n        actualTemperature = parseFloat(latestReading.svalue);\r\n      }\r\n    }\r\n    \r\n    // Tạo đối tượng dự đoán cho mỗi điểm thời gian trong giờ\r\n    const hourPredictions = temperaturePrediction.hour_predictions.map(hourPred => {\r\n      return {\r\n        time: hourPred.predicted_time,\r\n        predicted: hourPred.temperature,\r\n        confidence: hourPred.confidence,\r\n        actual: null, // Sẽ được điền sau khi có số đọc thực tế\r\n        minutes_ahead: hourPred.minutes_ahead\r\n      };\r\n    });\r\n    \r\n    // Thêm đọc hiện tại\r\n    const currentReading = {\r\n      time: temperaturePrediction.current_time,\r\n      predicted: null, // Không dự đoán cho thời gian hiện tại\r\n      confidence: null,\r\n      actual: actualTemperature || temperaturePrediction.current_temperature\r\n    };\r\n    \r\n    // Thêm vào mảng dự đoán\r\n    predictions.push(currentReading);\r\n    hourPredictions.forEach(pred => predictions.push(pred));\r\n    \r\n    // Chỉ giữ 100 dự đoán mới nhất\r\n    if (predictions.length > 100) {\r\n      const startIdx = predictions.length - 100;\r\n      predictions.splice(0, startIdx);\r\n    }\r\n    \r\n    console.log(`Đã lưu ${hourPredictions.length + 1} dự đoán mới. Tổng số dự đoán: ${predictions.length}`);\r\n    return hourPredictions;\r\n  } catch (error) {\r\n    console.error('Lỗi khi lưu dự đoán:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Tạo dữ liệu dự đoán mẫu cho trường hợp không có dữ liệu thực\r\nasync function generateMockPredictions() {\r\n  try {\r\n    // Lấy nhiệt độ thực tế hiện tại nếu có\r\n    let actualTemp = 37.0; // Giá trị mặc định\r\n    const tempSensor = await SensorModel.getSensorByType('temperature');\r\n    \r\n    if (tempSensor) {\r\n      const latestReading = await SensorModel.getLatestSensorData(tempSensor.sensor_id);\r\n      if (latestReading) {\r\n        actualTemp = parseFloat(latestReading.svalue);\r\n      }\r\n    }\r\n    \r\n    const now = new Date();\r\n    \r\n    // Đọc hiện tại\r\n    predictions.push({\r\n      time: now.toISOString(),\r\n      predicted: null,\r\n      confidence: null,\r\n      actual: actualTemp\r\n    });\r\n    \r\n    // Dự đoán cho các khoảng thời gian trong tương lai\r\n    for (let i = 1; i <= 4; i++) {\r\n      const futureTime = new Date(now.getTime() + i * 15 * 60000);\r\n      // Dự đoán tương lai (dao động ±2°C)\r\n      const tempChange = (Math.random() - 0.5) * 4;\r\n      const predictedTemp = actualTemp + tempChange;\r\n      \r\n      predictions.push({\r\n        time: futureTime.toISOString(),\r\n        predicted: predictedTemp,\r\n        confidence: 0.7 + Math.random() * 0.2, // Độ tin cậy ngẫu nhiên từ 0.7-0.9\r\n        actual: null,\r\n        minutes_ahead: i * 15\r\n      });\r\n    }\r\n    \r\n    console.log(`Đã tạo ${predictions.length} dự đoán mẫu`);\r\n  } catch (error) {\r\n    console.error('Lỗi khi tạo dữ liệu mẫu:', error);\r\n  }\r\n}"
        }
    ]
}