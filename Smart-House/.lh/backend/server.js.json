{
    "sourceFile": "backend/server.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1746469465294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746470366160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,10 @@\n const morgan = require('morgan');\r\n const path = require('path');\r\n const errorMiddleware = require('./middleware/errorMiddleware');\r\n const mqttService = require('./services/mqttService');\r\n-\r\n+const predictionRoutes = require('./routes/predictionRoutes');\r\n+const predictionService = require('./services/predictionService');\r\n // Load environment variables\r\n dotenv.config({ path: './config/.env' });\r\n \r\n // Import routes\r\n@@ -36,8 +37,9 @@\n app.use('/api/devices', deviceRoutes);\r\n app.use('/api/sensors', sensorRoutes);\r\n app.use('/api/alerts', alertRoutes);\r\n app.use('/api/alert-config', alertConfigRoutes);\r\n+app.use('/api/predictions', predictionRoutes);\r\n \r\n // Test endpoint to manually trigger alert check\r\n app.get('/api/test/check-alerts', async (req, res) => {\r\n   try {\r\n@@ -72,8 +74,12 @@\n // This gives time for the server to fully initialize\r\n setTimeout(() => {\r\n   console.log('Starting alert monitor service...');\r\n   alertMonitorService.start();\r\n+  \r\n+  // Start temperature prediction service\r\n+  console.log('Starting temperature prediction service...');\r\n+  predictionService.start(15); // Run prediction every 15 minutes\r\n }, 5000);\r\n \r\n // Start server\r\n const server = app.listen(PORT, () => {\r\n"
                },
                {
                    "date": 1746471563524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n const dotenv = require('dotenv');\r\n const morgan = require('morgan');\r\n const path = require('path');\r\n const errorMiddleware = require('./middleware/errorMiddleware');\r\n-const mqttService = require('./services/mqttService');\r\n+// Removed MQTT service import\r\n const predictionRoutes = require('./routes/predictionRoutes');\r\n const predictionService = require('./services/predictionService');\r\n // Load environment variables\r\n dotenv.config({ path: './config/.env' });\r\n@@ -66,10 +66,9 @@\n \r\n // Set port\r\n const PORT = process.env.PORT || 5000;\r\n \r\n-// Connect to MQTT broker\r\n-mqttService.connect();\r\n+// Removed MQTT broker connection\r\n \r\n // Start alert monitoring service with a delay\r\n // This gives time for the server to fully initialize\r\n setTimeout(() => {\r\n@@ -90,17 +89,17 @@\n process.on('unhandledRejection', (err) => {\r\n   console.error(`Error: ${err.message}`);\r\n   // Close server & exit process\r\n   alertMonitorService.stop();\r\n-  mqttService.disconnect();\r\n+  // Removed MQTT disconnect\r\n   server.close(() => process.exit(1));\r\n });\r\n \r\n // Handle graceful shutdown\r\n process.on('SIGTERM', async () => {\r\n   console.log('SIGTERM received, shutting down gracefully');\r\n   alertMonitorService.stop();\r\n-  mqttService.disconnect();\r\n+  // Removed MQTT disconnect\r\n   server.close(() => {\r\n     console.log('Process terminated');\r\n     process.exit(0);\r\n   });\r\n"
                }
            ],
            "date": 1746469465294,
            "name": "Commit-0",
            "content": "const express = require('express');\r\nconst cors = require('cors');\r\nconst dotenv = require('dotenv');\r\nconst morgan = require('morgan');\r\nconst path = require('path');\r\nconst errorMiddleware = require('./middleware/errorMiddleware');\r\nconst mqttService = require('./services/mqttService');\r\n\r\n// Load environment variables\r\ndotenv.config({ path: './config/.env' });\r\n\r\n// Import routes\r\nconst authRoutes = require('./routes/authRoutes');\r\nconst deviceRoutes = require('./routes/deviceRoutes');\r\nconst sensorRoutes = require('./routes/sensorRoutes');\r\nconst alertRoutes = require('./routes/alertRoutes');\r\nconst alertConfigRoutes = require('./routes/alertConfigRoutes');\r\nconst alertMonitorService = require('./services/alertMonitorService');\r\n\r\n// Initialize express app\r\nconst app = express();\r\n\r\n// Middleware\r\napp.use(cors({\r\n  origin: ['http://localhost:3000', 'http://127.0.0.1:3000'],\r\n  credentials: true,\r\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\r\n  allowedHeaders: ['Content-Type', 'Authorization']\r\n}));\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: true }));\r\napp.use(morgan('dev'));\r\n\r\n// API routes\r\napp.use('/api/auth', authRoutes);\r\napp.use('/api/devices', deviceRoutes);\r\napp.use('/api/sensors', sensorRoutes);\r\napp.use('/api/alerts', alertRoutes);\r\napp.use('/api/alert-config', alertConfigRoutes);\r\n\r\n// Test endpoint to manually trigger alert check\r\napp.get('/api/test/check-alerts', async (req, res) => {\r\n  try {\r\n    console.log('Manual alert check triggered');\r\n    await alertMonitorService.checkThresholds();\r\n    res.status(200).json({ success: true, message: 'Alert check completed' });\r\n  } catch (error) {\r\n    console.error('Error in manual alert check:', error);\r\n    res.status(500).json({ success: false, message: error.message });\r\n  }\r\n});\r\n\r\n// Serve frontend in production\r\nif (process.env.NODE_ENV === 'production') {\r\n  app.use(express.static(path.join(__dirname, '../frontend/build')));\r\n  \r\n  app.get('*', (req, res) => {\r\n    res.sendFile(path.join(__dirname, '../frontend/build', 'index.html'));\r\n  });\r\n}\r\n\r\n// Error handling middleware\r\napp.use(errorMiddleware);\r\n\r\n// Set port\r\nconst PORT = process.env.PORT || 5000;\r\n\r\n// Connect to MQTT broker\r\nmqttService.connect();\r\n\r\n// Start alert monitoring service with a delay\r\n// This gives time for the server to fully initialize\r\nsetTimeout(() => {\r\n  console.log('Starting alert monitor service...');\r\n  alertMonitorService.start();\r\n}, 5000);\r\n\r\n// Start server\r\nconst server = app.listen(PORT, () => {\r\n  console.log(`Server running on port ${PORT}`);\r\n});\r\n\r\n// Handle unhandled promise rejections\r\nprocess.on('unhandledRejection', (err) => {\r\n  console.error(`Error: ${err.message}`);\r\n  // Close server & exit process\r\n  alertMonitorService.stop();\r\n  mqttService.disconnect();\r\n  server.close(() => process.exit(1));\r\n});\r\n\r\n// Handle graceful shutdown\r\nprocess.on('SIGTERM', async () => {\r\n  console.log('SIGTERM received, shutting down gracefully');\r\n  alertMonitorService.stop();\r\n  mqttService.disconnect();\r\n  server.close(() => {\r\n    console.log('Process terminated');\r\n    process.exit(0);\r\n  });\r\n});"
        }
    ]
}