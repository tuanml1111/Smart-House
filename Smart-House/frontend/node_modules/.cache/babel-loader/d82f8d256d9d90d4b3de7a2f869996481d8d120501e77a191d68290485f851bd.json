{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\OneDrive\\\\M\\xE1y t\\xEDnh\\\\YOLO_HOME - FINAL\\\\frontend\\\\src\\\\components\\\\predictionChart.jsx\",\n  _s = $RefreshSig$();\n// frontend/src/components/PredictionChart.jsx\nimport React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport apiService from '../services/apiService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PredictionChart = () => {\n  _s();\n  var _predictions$find;\n  const [predictions, setPredictions] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    const fetchPredictions = async () => {\n      setIsLoading(true);\n      try {\n        const response = await apiService.get('/predictions');\n        if (response.data && response.data.data) {\n          // Format the data for the chart\n          const formattedData = response.data.data.map(pred => ({\n            ...pred,\n            time: new Date(pred.time).toLocaleTimeString()\n          }));\n          setPredictions(formattedData);\n        }\n      } catch (error) {\n        console.error('Failed to fetch predictions:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchPredictions();\n    const interval = setInterval(fetchPredictions, 300000); // Update every 5 minutes\n\n    return () => clearInterval(interval);\n  }, []);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading predictions...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 12\n    }, this);\n  }\n  if (!predictions.length) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-data\",\n      children: \"No prediction data available yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Find the latest prediction for the next hour\n  const nextHourPredictions = predictions.filter(p => p.minutes_ahead).sort((a, b) => new Date(a.time) - new Date(b.time));\n  const maxPredictedTemp = nextHourPredictions.length > 0 ? Math.max(...nextHourPredictions.map(p => p.predicted).filter(p => p !== null)) : null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"prediction-chart\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Temperature Prediction (Next Hour)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 300,\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: predictions,\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          label: {\n            value: 'Temperature (°C)',\n            angle: -90,\n            position: 'insideLeft'\n          },\n          domain: ['dataMin - 1', 'dataMax + 1']\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"actual\",\n          name: \"Actual\",\n          stroke: \"#8884d8\",\n          activeDot: {\n            r: 8\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"predicted\",\n          name: \"Predicted\",\n          stroke: \"#ff7300\",\n          activeDot: {\n            r: 8\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"prediction-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Current Temperature:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), \" \", ((_predictions$find = predictions.find(p => p.actual !== null && p.predicted === null)) === null || _predictions$find === void 0 ? void 0 : _predictions$find.actual) || 'N/A', \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Maximum Predicted Temperature:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), \" \", maxPredictedTemp !== null ? `${maxPredictedTemp.toFixed(1)}°C` : 'N/A']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(PredictionChart, \"MX98Raa8r6QL+BJ+CUoaPN/MpGk=\");\n_c = PredictionChart;\nexport default PredictionChart;\nvar _c;\n$RefreshReg$(_c, \"PredictionChart\");","map":{"version":3,"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","apiService","jsxDEV","_jsxDEV","PredictionChart","_s","_predictions$find","predictions","setPredictions","isLoading","setIsLoading","fetchPredictions","response","get","data","formattedData","map","pred","time","Date","toLocaleTimeString","error","console","interval","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","nextHourPredictions","filter","p","minutes_ahead","sort","a","b","maxPredictedTemp","Math","max","predicted","width","height","strokeDasharray","dataKey","label","value","angle","position","domain","type","name","stroke","activeDot","r","find","actual","toFixed","_c","$RefreshReg$"],"sources":["C:/Users/admin/OneDrive/Máy tính/YOLO_HOME - FINAL/frontend/src/components/predictionChart.jsx"],"sourcesContent":["// frontend/src/components/PredictionChart.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\nimport apiService from '../services/apiService';\r\n\r\nconst PredictionChart = () => {\r\n  const [predictions, setPredictions] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  \r\n  useEffect(() => {\r\n    const fetchPredictions = async () => {\r\n      setIsLoading(true);\r\n      try {\r\n        const response = await apiService.get('/predictions');\r\n        if (response.data && response.data.data) {\r\n          // Format the data for the chart\r\n          const formattedData = response.data.data.map(pred => ({\r\n            ...pred,\r\n            time: new Date(pred.time).toLocaleTimeString(),\r\n          }));\r\n          \r\n          setPredictions(formattedData);\r\n        }\r\n      } catch (error) {\r\n        console.error('Failed to fetch predictions:', error);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchPredictions();\r\n    const interval = setInterval(fetchPredictions, 300000); // Update every 5 minutes\r\n    \r\n    return () => clearInterval(interval);\r\n  }, []);\r\n  \r\n  if (isLoading) {\r\n    return <div className=\"loading\">Loading predictions...</div>;\r\n  }\r\n  \r\n  if (!predictions.length) {\r\n    return <div className=\"no-data\">No prediction data available yet.</div>;\r\n  }\r\n  \r\n  // Find the latest prediction for the next hour\r\n  const nextHourPredictions = predictions\r\n    .filter(p => p.minutes_ahead)\r\n    .sort((a, b) => new Date(a.time) - new Date(b.time));\r\n  \r\n  const maxPredictedTemp = nextHourPredictions.length > 0 \r\n    ? Math.max(...nextHourPredictions.map(p => p.predicted).filter(p => p !== null))\r\n    : null;\r\n  \r\n  return (\r\n    <div className=\"prediction-chart\">\r\n      <h3>Temperature Prediction (Next Hour)</h3>\r\n      <ResponsiveContainer width=\"100%\" height={300}>\r\n        <LineChart data={predictions}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"time\" />\r\n          <YAxis \r\n            label={{ value: 'Temperature (°C)', angle: -90, position: 'insideLeft' }} \r\n            domain={['dataMin - 1', 'dataMax + 1']} \r\n          />\r\n          <Tooltip />\r\n          <Legend />\r\n          <Line \r\n            type=\"monotone\" \r\n            dataKey=\"actual\" \r\n            name=\"Actual\" \r\n            stroke=\"#8884d8\" \r\n            activeDot={{ r: 8 }} \r\n          />\r\n          <Line \r\n            type=\"monotone\" \r\n            dataKey=\"predicted\" \r\n            name=\"Predicted\" \r\n            stroke=\"#ff7300\" \r\n            activeDot={{ r: 8 }} \r\n          />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n      <div className=\"prediction-info\">\r\n        <p>\r\n          <strong>Current Temperature:</strong> {\r\n            predictions.find(p => p.actual !== null && p.predicted === null)?.actual || 'N/A'\r\n          }°C\r\n        </p>\r\n        <p>\r\n          <strong>Maximum Predicted Temperature:</strong> {\r\n            maxPredictedTemp !== null ? `${maxPredictedTemp.toFixed(1)}°C` : 'N/A'\r\n          }\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PredictionChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}