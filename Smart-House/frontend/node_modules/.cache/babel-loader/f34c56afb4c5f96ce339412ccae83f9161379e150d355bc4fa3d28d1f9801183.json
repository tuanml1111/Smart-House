{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\OneDrive\\\\M\\xE1y t\\xEDnh\\\\YOLO_HOME - Copy - 2\\\\frontend\\\\src\\\\components\\\\Sensors\\\\SensorChart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\n// Dữ liệu mẫu cho 1 tuần\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generateMockData = sensorType => {\n  const data = [];\n  const now = new Date();\n  for (let i = 6; i >= 0; i--) {\n    const date = new Date(now);\n    date.setDate(now.getDate() - i);\n    let value;\n    if (sensorType === 'temperature') {\n      // Giá trị nhiệt độ ngẫu nhiên từ 20-35 độ\n      value = parseFloat((Math.random() * 15 + 20).toFixed(1));\n    } else if (sensorType === 'humidity') {\n      // Giá trị độ ẩm ngẫu nhiên từ 40-80%\n      value = parseFloat((Math.random() * 40 + 40).toFixed(1));\n    }\n    data.push({\n      date: date.toLocaleDateString('en-US', {\n        weekday: 'short'\n      }),\n      value: value\n    });\n  }\n  return data;\n};\nconst SensorChart = ({\n  sensorType\n}) => {\n  _s();\n  const [data] = useState(generateMockData(sensorType));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sensor-chart-container\",\n    style: {\n      width: '100%',\n      height: 400\n    },\n    children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: data,\n        margin: {\n          top: 20,\n          right: 30,\n          left: 20,\n          bottom: 20\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          label: {\n            value: sensorType === 'temperature' ? '°C' : '%',\n            angle: -90,\n            position: 'insideLeft'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"value\",\n          name: sensorType === 'temperature' ? 'Temperature' : 'Humidity',\n          stroke: sensorType === 'temperature' ? '#ff4500' : '#1e90ff',\n          activeDot: {\n            r: 8\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(SensorChart, \"Pe9yUMkRLajHWdBl8EETAFqMJ8w=\");\n_c = SensorChart;\nexport default SensorChart;\nvar _c;\n$RefreshReg$(_c, \"SensorChart\");","map":{"version":3,"names":["React","useState","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","generateMockData","sensorType","data","now","Date","i","date","setDate","getDate","value","parseFloat","Math","random","toFixed","push","toLocaleDateString","weekday","SensorChart","_s","className","style","width","height","children","margin","top","right","left","bottom","strokeDasharray","fileName","_jsxFileName","lineNumber","columnNumber","dataKey","label","angle","position","type","name","stroke","activeDot","r","_c","$RefreshReg$"],"sources":["C:/Users/admin/OneDrive/Máy tính/YOLO_HOME - Copy - 2/frontend/src/components/Sensors/SensorChart.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\n\r\n// Dữ liệu mẫu cho 1 tuần\r\nconst generateMockData = (sensorType) => {\r\n  const data = [];\r\n  const now = new Date();\r\n  \r\n  for (let i = 6; i >= 0; i--) {\r\n    const date = new Date(now);\r\n    date.setDate(now.getDate() - i);\r\n    \r\n    let value;\r\n    if (sensorType === 'temperature') {\r\n      // Giá trị nhiệt độ ngẫu nhiên từ 20-35 độ\r\n      value = parseFloat((Math.random() * 15 + 20).toFixed(1));\r\n    } else if (sensorType === 'humidity') {\r\n      // Giá trị độ ẩm ngẫu nhiên từ 40-80%\r\n      value = parseFloat((Math.random() * 40 + 40).toFixed(1));\r\n    }\r\n    \r\n    data.push({\r\n      date: date.toLocaleDateString('en-US', { weekday: 'short' }),\r\n      value: value\r\n    });\r\n  }\r\n  \r\n  return data;\r\n};\r\n\r\nconst SensorChart = ({ sensorType }) => {\r\n  const [data] = useState(generateMockData(sensorType));\r\n  \r\n  return (\r\n    <div className=\"sensor-chart-container\" style={{ width: '100%', height: 400 }}>\r\n      <ResponsiveContainer>\r\n        <LineChart\r\n          data={data}\r\n          margin={{ top: 20, right: 30, left: 20, bottom: 20 }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"date\" />\r\n          <YAxis \r\n            label={{ \r\n              value: sensorType === 'temperature' ? '°C' : '%', \r\n              angle: -90, \r\n              position: 'insideLeft' \r\n            }} \r\n          />\r\n          <Tooltip />\r\n          <Legend />\r\n          <Line \r\n            type=\"monotone\" \r\n            dataKey=\"value\" \r\n            name={sensorType === 'temperature' ? 'Temperature' : 'Humidity'}\r\n            stroke={sensorType === 'temperature' ? '#ff4500' : '#1e90ff'} \r\n            activeDot={{ r: 8 }} \r\n          />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SensorChart;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,SAAS,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,EAAEC,aAAa,EAAEC,OAAO,EAAEC,MAAM,EAAEC,mBAAmB,QAAQ,UAAU;;AAE7G;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,gBAAgB,GAAIC,UAAU,IAAK;EACvC,MAAMC,IAAI,GAAG,EAAE;EACf,MAAMC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;EAEtB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC3B,MAAMC,IAAI,GAAG,IAAIF,IAAI,CAACD,GAAG,CAAC;IAC1BG,IAAI,CAACC,OAAO,CAACJ,GAAG,CAACK,OAAO,CAAC,CAAC,GAAGH,CAAC,CAAC;IAE/B,IAAII,KAAK;IACT,IAAIR,UAAU,KAAK,aAAa,EAAE;MAChC;MACAQ,KAAK,GAAGC,UAAU,CAAC,CAACC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAEC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC1D,CAAC,MAAM,IAAIZ,UAAU,KAAK,UAAU,EAAE;MACpC;MACAQ,KAAK,GAAGC,UAAU,CAAC,CAACC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAEC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC1D;IAEAX,IAAI,CAACY,IAAI,CAAC;MACRR,IAAI,EAAEA,IAAI,CAACS,kBAAkB,CAAC,OAAO,EAAE;QAAEC,OAAO,EAAE;MAAQ,CAAC,CAAC;MAC5DP,KAAK,EAAEA;IACT,CAAC,CAAC;EACJ;EAEA,OAAOP,IAAI;AACb,CAAC;AAED,MAAMe,WAAW,GAAGA,CAAC;EAAEhB;AAAW,CAAC,KAAK;EAAAiB,EAAA;EACtC,MAAM,CAAChB,IAAI,CAAC,GAAGb,QAAQ,CAACW,gBAAgB,CAACC,UAAU,CAAC,CAAC;EAErD,oBACEF,OAAA;IAAKoB,SAAS,EAAC,wBAAwB;IAACC,KAAK,EAAE;MAAEC,KAAK,EAAE,MAAM;MAAEC,MAAM,EAAE;IAAI,CAAE;IAAAC,QAAA,eAC5ExB,OAAA,CAACF,mBAAmB;MAAA0B,QAAA,eAClBxB,OAAA,CAACT,SAAS;QACRY,IAAI,EAAEA,IAAK;QACXsB,MAAM,EAAE;UAAEC,GAAG,EAAE,EAAE;UAAEC,KAAK,EAAE,EAAE;UAAEC,IAAI,EAAE,EAAE;UAAEC,MAAM,EAAE;QAAG,CAAE;QAAAL,QAAA,gBAErDxB,OAAA,CAACL,aAAa;UAACmC,eAAe,EAAC;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACvClC,OAAA,CAACP,KAAK;UAAC0C,OAAO,EAAC;QAAM;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACxBlC,OAAA,CAACN,KAAK;UACJ0C,KAAK,EAAE;YACL1B,KAAK,EAAER,UAAU,KAAK,aAAa,GAAG,IAAI,GAAG,GAAG;YAChDmC,KAAK,EAAE,CAAC,EAAE;YACVC,QAAQ,EAAE;UACZ;QAAE;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eACFlC,OAAA,CAACJ,OAAO;UAAAmC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACXlC,OAAA,CAACH,MAAM;UAAAkC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACVlC,OAAA,CAACR,IAAI;UACH+C,IAAI,EAAC,UAAU;UACfJ,OAAO,EAAC,OAAO;UACfK,IAAI,EAAEtC,UAAU,KAAK,aAAa,GAAG,aAAa,GAAG,UAAW;UAChEuC,MAAM,EAAEvC,UAAU,KAAK,aAAa,GAAG,SAAS,GAAG,SAAU;UAC7DwC,SAAS,EAAE;YAAEC,CAAC,EAAE;UAAE;QAAE;UAAAZ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrB,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACO;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACO;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnB,CAAC;AAEV,CAAC;AAACf,EAAA,CAhCID,WAAW;AAAA0B,EAAA,GAAX1B,WAAW;AAkCjB,eAAeA,WAAW;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}