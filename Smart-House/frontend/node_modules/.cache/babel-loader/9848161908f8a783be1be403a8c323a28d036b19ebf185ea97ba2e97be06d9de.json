{"ast":null,"code":"import apiService from '../services/apiService';\nclass AlertController {\n  static async getAllAlerts(limit = 50, status = null) {\n    try {\n      console.log('Fetching alerts with params:', {\n        limit,\n        status\n      });\n\n      // Build query parameters\n      let queryParams = '';\n      if (limit) {\n        queryParams += `limit=${limit}`;\n      }\n      if (status) {\n        queryParams += queryParams ? `&status=${status}` : `status=${status}`;\n      }\n      const url = queryParams ? `/alerts?${queryParams}` : '/alerts';\n      console.log('Requesting URL:', url);\n      const response = await apiService.get(url);\n      console.log('Alerts response:', response.data);\n      if (response.data && response.data.data) {\n        return response.data.data.map(alert => ({\n          id: alert.alert_id,\n          deviceId: alert.device_id,\n          sensorId: alert.sensor_id,\n          type: alert.alert_type,\n          message: alert.amessage,\n          timestamp: alert.alerted_time,\n          status: alert.status\n        }));\n      }\n      return [];\n    } catch (error) {\n      console.error('Error fetching alerts:', error);\n      throw error;\n    }\n  }\n  static async getAlertById(id) {\n    try {\n      const response = await apiService.get(`/alerts/${id}`);\n      if (response.data && response.data.data) {\n        const alert = response.data.data;\n        return {\n          id: alert.alert_id,\n          deviceId: alert.device_id,\n          sensorId: alert.sensor_id,\n          type: alert.alert_type,\n          message: alert.amessage,\n          timestamp: alert.alerted_time,\n          status: alert.status\n        };\n      }\n      throw new Error('Alert not found');\n    } catch (error) {\n      console.error(`Error fetching alert with id ${id}:`, error);\n      throw error;\n    }\n  }\n  static async updateAlertStatus(id, status) {\n    try {\n      console.log(`Updating alert ${id} status to ${status}`);\n      const response = await apiService.put(`/alerts/${id}`, {\n        status\n      });\n      if (response.data && response.data.data) {\n        const alert = response.data.data;\n        return {\n          id: alert.alert_id,\n          deviceId: alert.device_id,\n          sensorId: alert.sensor_id,\n          type: alert.alert_type,\n          message: alert.amessage,\n          timestamp: alert.alerted_time,\n          status: alert.status\n        };\n      }\n      throw new Error('Failed to update alert status');\n    } catch (error) {\n      console.error(`Error updating alert status for id ${id}:`, error);\n      throw error;\n    }\n  }\n  static async resolveAllAlerts() {\n    try {\n      console.log('Resolving all pending alerts');\n      const response = await apiService.put('/alerts/resolve-all');\n      if (response.data && response.data.success) {\n        return {\n          success: true,\n          count: response.data.count,\n          message: response.data.message\n        };\n      }\n      throw new Error('Failed to resolve all alerts');\n    } catch (error) {\n      console.error('Error resolving all alerts:', error);\n      throw error;\n    }\n  }\n  static async getRecentAlerts(limit = 5) {\n    try {\n      console.log(`Fetching ${limit} recent alerts`);\n      const response = await apiService.get(`/alerts/recent?limit=${limit}`);\n      if (response.data && response.data.data) {\n        return response.data.data.map(alert => ({\n          id: alert.alert_id,\n          type: alert.alert_type.toLowerCase(),\n          message: alert.amessage,\n          timestamp: alert.alerted_time,\n          status: alert.status\n        }));\n      }\n\n      // If API returns no data, return empty array\n      return [];\n    } catch (error) {\n      console.error('Error fetching recent alerts:', error);\n\n      // Return empty array in case of error to prevent UI from breaking\n      return [];\n    }\n  }\n}\nexport default AlertController;","map":{"version":3,"names":["apiService","AlertController","getAllAlerts","limit","status","console","log","queryParams","url","response","get","data","map","alert","id","alert_id","deviceId","device_id","sensorId","sensor_id","type","alert_type","message","amessage","timestamp","alerted_time","error","getAlertById","Error","updateAlertStatus","put","resolveAllAlerts","success","count","getRecentAlerts","toLowerCase"],"sources":["C:/Users/admin/Smart-House/frontend/src/controllers/AlertController.js"],"sourcesContent":["import apiService from '../services/apiService';\r\n\r\nclass AlertController {\r\n  static async getAllAlerts(limit = 50, status = null) {\r\n    try {\r\n      console.log('Fetching alerts with params:', { limit, status });\r\n      \r\n      // Build query parameters\r\n      let queryParams = '';\r\n      if (limit) {\r\n        queryParams += `limit=${limit}`;\r\n      }\r\n      if (status) {\r\n        queryParams += queryParams ? `&status=${status}` : `status=${status}`;\r\n      }\r\n      \r\n      const url = queryParams ? `/alerts?${queryParams}` : '/alerts';\r\n      console.log('Requesting URL:', url);\r\n      \r\n      const response = await apiService.get(url);\r\n      console.log('Alerts response:', response.data);\r\n      \r\n      if (response.data && response.data.data) {\r\n        return response.data.data.map(alert => ({\r\n          id: alert.alert_id,\r\n          deviceId: alert.device_id,\r\n          sensorId: alert.sensor_id,\r\n          type: alert.alert_type,\r\n          message: alert.amessage,\r\n          timestamp: alert.alerted_time,\r\n          status: alert.status\r\n        }));\r\n      }\r\n      \r\n      return [];\r\n    } catch (error) {\r\n      console.error('Error fetching alerts:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  static async getAlertById(id) {\r\n    try {\r\n      const response = await apiService.get(`/alerts/${id}`);\r\n      \r\n      if (response.data && response.data.data) {\r\n        const alert = response.data.data;\r\n        return {\r\n          id: alert.alert_id,\r\n          deviceId: alert.device_id,\r\n          sensorId: alert.sensor_id,\r\n          type: alert.alert_type,\r\n          message: alert.amessage,\r\n          timestamp: alert.alerted_time,\r\n          status: alert.status\r\n        };\r\n      }\r\n      \r\n      throw new Error('Alert not found');\r\n    } catch (error) {\r\n      console.error(`Error fetching alert with id ${id}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  static async updateAlertStatus(id, status) {\r\n    try {\r\n      console.log(`Updating alert ${id} status to ${status}`);\r\n      const response = await apiService.put(`/alerts/${id}`, { status });\r\n      \r\n      if (response.data && response.data.data) {\r\n        const alert = response.data.data;\r\n        return {\r\n          id: alert.alert_id,\r\n          deviceId: alert.device_id,\r\n          sensorId: alert.sensor_id,\r\n          type: alert.alert_type,\r\n          message: alert.amessage,\r\n          timestamp: alert.alerted_time,\r\n          status: alert.status\r\n        };\r\n      }\r\n      \r\n      throw new Error('Failed to update alert status');\r\n    } catch (error) {\r\n      console.error(`Error updating alert status for id ${id}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  static async resolveAllAlerts() {\r\n    try {\r\n      console.log('Resolving all pending alerts');\r\n      const response = await apiService.put('/alerts/resolve-all');\r\n      \r\n      if (response.data && response.data.success) {\r\n        return {\r\n          success: true,\r\n          count: response.data.count,\r\n          message: response.data.message\r\n        };\r\n      }\r\n      \r\n      throw new Error('Failed to resolve all alerts');\r\n    } catch (error) {\r\n      console.error('Error resolving all alerts:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async getRecentAlerts(limit = 5) {\r\n    try {\r\n      console.log(`Fetching ${limit} recent alerts`);\r\n      const response = await apiService.get(`/alerts/recent?limit=${limit}`);\r\n      \r\n      if (response.data && response.data.data) {\r\n        return response.data.data.map(alert => ({\r\n          id: alert.alert_id,\r\n          type: alert.alert_type.toLowerCase(),\r\n          message: alert.amessage,\r\n          timestamp: alert.alerted_time,\r\n          status: alert.status\r\n        }));\r\n      }\r\n      \r\n      // If API returns no data, return empty array\r\n      return [];\r\n    } catch (error) {\r\n      console.error('Error fetching recent alerts:', error);\r\n      \r\n      // Return empty array in case of error to prevent UI from breaking\r\n      return [];\r\n    }\r\n  }\r\n}\r\n\r\nexport default AlertController;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}